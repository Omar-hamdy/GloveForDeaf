
GloveForDeaf.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001134  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  00001134  000011a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000125c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001dff  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009a2  00000000  00000000  0000317f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e11  00000000  00000000  00003b21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ac  00000000  00000000  00004934  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006c5  00000000  00000000  00004ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e43  00000000  00000000  000051a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00005fe8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	68 03       	fmul	r22, r16
      56:	72 03       	mulsu	r23, r18
      58:	7c 03       	fmul	r23, r20
      5a:	86 03       	fmuls	r16, r22
      5c:	90 03       	fmuls	r17, r16
      5e:	9a 03       	fmulsu	r17, r18
      60:	a4 03       	fmuls	r18, r20
      62:	ae 03       	fmulsu	r18, r22
      64:	ce 03       	fmulsu	r20, r22
      66:	de 03       	fmulsu	r21, r22
      68:	ee 03       	fmulsu	r22, r22
      6a:	fe 03       	fmulsu	r23, r22
      6c:	0e 04       	cpc	r0, r14
      6e:	1e 04       	cpc	r1, r14
      70:	2e 04       	cpc	r2, r14
      72:	3e 04       	cpc	r3, r14

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf e5       	ldi	r28, 0x5F	; 95
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	10 e0       	ldi	r17, 0x00	; 0
      82:	a0 e6       	ldi	r26, 0x60	; 96
      84:	b0 e0       	ldi	r27, 0x00	; 0
      86:	e4 e3       	ldi	r30, 0x34	; 52
      88:	f1 e1       	ldi	r31, 0x11	; 17
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a8 3b       	cpi	r26, 0xB8	; 184
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>
      96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
      9a:	0c 94 98 08 	jmp	0x1130	; 0x1130 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:
#include "main.h"



int main(void)
{
      a2:	cf 93       	push	r28
      a4:	df 93       	push	r29
      a6:	cd b7       	in	r28, 0x3d	; 61
      a8:	de b7       	in	r29, 0x3e	; 62
      aa:	2a 97       	sbiw	r28, 0x0a	; 10
      ac:	0f b6       	in	r0, 0x3f	; 63
      ae:	f8 94       	cli
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	0f be       	out	0x3f, r0	; 63
      b4:	cd bf       	out	0x3d, r28	; 61
	 
	 
	

	//lcd, adc init
	LCD_Initialize();
      b6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_Initialize>
	LCD_Clear();
      ba:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_Clear>
	ADC_Initialization(AVCC, ADC_PRE128);
      be:	67 e0       	ldi	r22, 0x07	; 7
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	0e 94 43 03 	call	0x686	; 0x686 <ADC_Initialization>
	//avcc to choose same micro controller voltage
	//pre scalar 128 to make sure freq below 200khz
	
	//output pins to choose whether sensor is powered..
	//when 2 sensors are connected to same adc pin
	DIO_SetPin_Direction(DIO_PORTC, DIO_PIN3, DIO_OUTPUT);
      c6:	41 e0       	ldi	r20, 0x01	; 1
      c8:	63 e0       	ldi	r22, 0x03	; 3
      ca:	82 e0       	ldi	r24, 0x02	; 2
      cc:	0e 94 55 04 	call	0x8aa	; 0x8aa <DIO_SetPin_Direction>
	DIO_SetPin_Direction(DIO_PORTC, DIO_PIN4, DIO_OUTPUT);
      d0:	41 e0       	ldi	r20, 0x01	; 1
      d2:	64 e0       	ldi	r22, 0x04	; 4
      d4:	82 e0       	ldi	r24, 0x02	; 2
      d6:	0e 94 55 04 	call	0x8aa	; 0x8aa <DIO_SetPin_Direction>
	DIO_SetPin_Direction(DIO_PORTC, DIO_PIN5, DIO_OUTPUT);
      da:	41 e0       	ldi	r20, 0x01	; 1
      dc:	65 e0       	ldi	r22, 0x05	; 5
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	0e 94 55 04 	call	0x8aa	; 0x8aa <DIO_SetPin_Direction>
	DIO_SetPin_Direction(DIO_PORTC, DIO_PIN6, DIO_OUTPUT);
      e4:	41 e0       	ldi	r20, 0x01	; 1
      e6:	66 e0       	ldi	r22, 0x06	; 6
      e8:	82 e0       	ldi	r24, 0x02	; 2
      ea:	0e 94 55 04 	call	0x8aa	; 0x8aa <DIO_SetPin_Direction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ee:	2f ef       	ldi	r18, 0xFF	; 255
      f0:	83 ec       	ldi	r24, 0xC3	; 195
      f2:	99 e0       	ldi	r25, 0x09	; 9
      f4:	21 50       	subi	r18, 0x01	; 1
      f6:	80 40       	sbci	r24, 0x00	; 0
      f8:	90 40       	sbci	r25, 0x00	; 0
      fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x52>
      fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x5c>
      fe:	00 00       	nop
		
		
		//fingers readings
		//channel 0
		//finger 1
		DIO_SetPin_Value(DIO_PORTC, DIO_PIN3, DIO_HIGH);
     100:	41 e0       	ldi	r20, 0x01	; 1
     102:	63 e0       	ldi	r22, 0x03	; 3
     104:	82 e0       	ldi	r24, 0x02	; 2
     106:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
     10a:	2f ef       	ldi	r18, 0xFF	; 255
     10c:	81 ee       	ldi	r24, 0xE1	; 225
     10e:	94 e0       	ldi	r25, 0x04	; 4
     110:	21 50       	subi	r18, 0x01	; 1
     112:	80 40       	sbci	r24, 0x00	; 0
     114:	90 40       	sbci	r25, 0x00	; 0
     116:	e1 f7       	brne	.-8      	; 0x110 <main+0x6e>
     118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x78>
     11a:	00 00       	nop
		_delay_ms(100);//wait for voltage high
		(ADC_Read(ADC_CH0)*5)/1024;//neglect first conversion (channel selection problem)
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	0e 94 c4 03 	call	0x788	; 0x788 <ADC_Read>
     122:	8f e9       	ldi	r24, 0x9F	; 159
     124:	9f e0       	ldi	r25, 0x0F	; 15
     126:	01 97       	sbiw	r24, 0x01	; 1
     128:	f1 f7       	brne	.-4      	; 0x126 <main+0x84>
     12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x8a>
     12c:	00 00       	nop
		_delay_ms(1);
		arr[0] = (ADC_Read(ADC_CH0)*5)/1024;
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	0e 94 c4 03 	call	0x788	; 0x788 <ADC_Read>
     134:	9c 01       	movw	r18, r24
     136:	22 0f       	add	r18, r18
     138:	33 1f       	adc	r19, r19
     13a:	22 0f       	add	r18, r18
     13c:	33 1f       	adc	r19, r19
     13e:	82 0f       	add	r24, r18
     140:	93 1f       	adc	r25, r19
     142:	19 2f       	mov	r17, r25
     144:	16 95       	lsr	r17
     146:	16 95       	lsr	r17
		DIO_SetPin_Value(DIO_PORTC, DIO_PIN3, DIO_LOW);
     148:	40 e0       	ldi	r20, 0x00	; 0
     14a:	63 e0       	ldi	r22, 0x03	; 3
     14c:	82 e0       	ldi	r24, 0x02	; 2
     14e:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
		
		//finger 2
		DIO_SetPin_Value(DIO_PORTC, DIO_PIN4, DIO_HIGH);
     152:	41 e0       	ldi	r20, 0x01	; 1
     154:	64 e0       	ldi	r22, 0x04	; 4
     156:	82 e0       	ldi	r24, 0x02	; 2
     158:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
     15c:	9f ef       	ldi	r25, 0xFF	; 255
     15e:	21 ee       	ldi	r18, 0xE1	; 225
     160:	84 e0       	ldi	r24, 0x04	; 4
     162:	91 50       	subi	r25, 0x01	; 1
     164:	20 40       	sbci	r18, 0x00	; 0
     166:	80 40       	sbci	r24, 0x00	; 0
     168:	e1 f7       	brne	.-8      	; 0x162 <main+0xc0>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0xca>
     16c:	00 00       	nop
		_delay_ms(100);
		(ADC_Read(ADC_CH0)*5)/1024;//neglect first conversion
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	0e 94 c4 03 	call	0x788	; 0x788 <ADC_Read>
     174:	8f e9       	ldi	r24, 0x9F	; 159
     176:	9f e0       	ldi	r25, 0x0F	; 15
     178:	01 97       	sbiw	r24, 0x01	; 1
     17a:	f1 f7       	brne	.-4      	; 0x178 <main+0xd6>
     17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0xdc>
     17e:	00 00       	nop
		_delay_ms(1);
		arr[1] = (ADC_Read(ADC_CH0)*5)/1024;
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	0e 94 c4 03 	call	0x788	; 0x788 <ADC_Read>
     186:	9c 01       	movw	r18, r24
     188:	22 0f       	add	r18, r18
     18a:	33 1f       	adc	r19, r19
     18c:	22 0f       	add	r18, r18
     18e:	33 1f       	adc	r19, r19
     190:	82 0f       	add	r24, r18
     192:	93 1f       	adc	r25, r19
     194:	d9 2e       	mov	r13, r25
     196:	d6 94       	lsr	r13
     198:	d6 94       	lsr	r13
		DIO_SetPin_Value(DIO_PORTC, DIO_PIN4, DIO_LOW);
     19a:	40 e0       	ldi	r20, 0x00	; 0
     19c:	64 e0       	ldi	r22, 0x04	; 4
     19e:	82 e0       	ldi	r24, 0x02	; 2
     1a0:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
		
		//channel 2
		(ADC_Read(ADC_CH2)*5)/1024;//neglect
     1a4:	82 e0       	ldi	r24, 0x02	; 2
     1a6:	0e 94 c4 03 	call	0x788	; 0x788 <ADC_Read>
     1aa:	8f e9       	ldi	r24, 0x9F	; 159
     1ac:	9f e0       	ldi	r25, 0x0F	; 15
     1ae:	01 97       	sbiw	r24, 0x01	; 1
     1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0x10c>
     1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x112>
     1b4:	00 00       	nop
		_delay_ms(1);
		//finger 3
		arr[2] = (ADC_Read(ADC_CH2)*5)/1024;
     1b6:	82 e0       	ldi	r24, 0x02	; 2
     1b8:	0e 94 c4 03 	call	0x788	; 0x788 <ADC_Read>
     1bc:	9c 01       	movw	r18, r24
     1be:	22 0f       	add	r18, r18
     1c0:	33 1f       	adc	r19, r19
     1c2:	22 0f       	add	r18, r18
     1c4:	33 1f       	adc	r19, r19
     1c6:	82 0f       	add	r24, r18
     1c8:	93 1f       	adc	r25, r19
     1ca:	b9 2e       	mov	r11, r25
     1cc:	b6 94       	lsr	r11
     1ce:	b6 94       	lsr	r11
		
		//channel 3
		//finger 4
		DIO_SetPin_Value(DIO_PORTC, DIO_PIN5, DIO_HIGH);
     1d0:	41 e0       	ldi	r20, 0x01	; 1
     1d2:	65 e0       	ldi	r22, 0x05	; 5
     1d4:	82 e0       	ldi	r24, 0x02	; 2
     1d6:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
     1da:	9f ef       	ldi	r25, 0xFF	; 255
     1dc:	21 ee       	ldi	r18, 0xE1	; 225
     1de:	84 e0       	ldi	r24, 0x04	; 4
     1e0:	91 50       	subi	r25, 0x01	; 1
     1e2:	20 40       	sbci	r18, 0x00	; 0
     1e4:	80 40       	sbci	r24, 0x00	; 0
     1e6:	e1 f7       	brne	.-8      	; 0x1e0 <main+0x13e>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0x148>
     1ea:	00 00       	nop
		_delay_ms(100);
		(ADC_Read(ADC_CH3)*5)/1024;//neglect
     1ec:	83 e0       	ldi	r24, 0x03	; 3
     1ee:	0e 94 c4 03 	call	0x788	; 0x788 <ADC_Read>
     1f2:	8f e9       	ldi	r24, 0x9F	; 159
     1f4:	9f e0       	ldi	r25, 0x0F	; 15
     1f6:	01 97       	sbiw	r24, 0x01	; 1
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <main+0x154>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x15a>
     1fc:	00 00       	nop
		_delay_ms(1);
		arr[3] = (ADC_Read(ADC_CH3)*5)/1024;
     1fe:	83 e0       	ldi	r24, 0x03	; 3
     200:	0e 94 c4 03 	call	0x788	; 0x788 <ADC_Read>
     204:	9c 01       	movw	r18, r24
     206:	22 0f       	add	r18, r18
     208:	33 1f       	adc	r19, r19
     20a:	22 0f       	add	r18, r18
     20c:	33 1f       	adc	r19, r19
     20e:	82 0f       	add	r24, r18
     210:	93 1f       	adc	r25, r19
     212:	a9 2e       	mov	r10, r25
     214:	a6 94       	lsr	r10
     216:	a6 94       	lsr	r10
		DIO_SetPin_Value(DIO_PORTC, DIO_PIN5, DIO_LOW);
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	65 e0       	ldi	r22, 0x05	; 5
     21c:	82 e0       	ldi	r24, 0x02	; 2
     21e:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
		
		//finger 5
		DIO_SetPin_Value(DIO_PORTC, DIO_PIN6, DIO_HIGH);
     222:	41 e0       	ldi	r20, 0x01	; 1
     224:	66 e0       	ldi	r22, 0x06	; 6
     226:	82 e0       	ldi	r24, 0x02	; 2
     228:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
     22c:	9f ef       	ldi	r25, 0xFF	; 255
     22e:	21 ee       	ldi	r18, 0xE1	; 225
     230:	84 e0       	ldi	r24, 0x04	; 4
     232:	91 50       	subi	r25, 0x01	; 1
     234:	20 40       	sbci	r18, 0x00	; 0
     236:	80 40       	sbci	r24, 0x00	; 0
     238:	e1 f7       	brne	.-8      	; 0x232 <main+0x190>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x19a>
     23c:	00 00       	nop
		_delay_ms(100);
		(ADC_Read(ADC_CH3)*5)/1024;//neglect
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	0e 94 c4 03 	call	0x788	; 0x788 <ADC_Read>
     244:	8f e9       	ldi	r24, 0x9F	; 159
     246:	9f e0       	ldi	r25, 0x0F	; 15
     248:	01 97       	sbiw	r24, 0x01	; 1
     24a:	f1 f7       	brne	.-4      	; 0x248 <main+0x1a6>
     24c:	00 c0       	rjmp	.+0      	; 0x24e <main+0x1ac>
     24e:	00 00       	nop
		_delay_ms(1);
		arr[4] = (ADC_Read(ADC_CH3)*5)/1024;
     250:	83 e0       	ldi	r24, 0x03	; 3
     252:	0e 94 c4 03 	call	0x788	; 0x788 <ADC_Read>
     256:	9c 01       	movw	r18, r24
     258:	22 0f       	add	r18, r18
     25a:	33 1f       	adc	r19, r19
     25c:	22 0f       	add	r18, r18
     25e:	33 1f       	adc	r19, r19
     260:	82 0f       	add	r24, r18
     262:	93 1f       	adc	r25, r19
     264:	c9 2e       	mov	r12, r25
     266:	c6 94       	lsr	r12
     268:	c6 94       	lsr	r12
		DIO_SetPin_Value(DIO_PORTC, DIO_PIN6, DIO_LOW);
     26a:	40 e0       	ldi	r20, 0x00	; 0
     26c:	66 e0       	ldi	r22, 0x06	; 6
     26e:	82 e0       	ldi	r24, 0x02	; 2
     270:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
		
		 
		char str1[5]; //string contains individual characters ex: {4},{3},{2},...
		char str2[5]; //string contains all numbers in one string ex: 43214
		
		sprintf( (char*)str1,"%d", arr[0]);		//converts numbers in array to characters
     274:	1f 92       	push	r1
     276:	1f 93       	push	r17
     278:	0f 2e       	mov	r0, r31
     27a:	f0 e6       	ldi	r31, 0x60	; 96
     27c:	ef 2e       	mov	r14, r31
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	ff 2e       	mov	r15, r31
     282:	f0 2d       	mov	r31, r0
     284:	ff 92       	push	r15
     286:	ef 92       	push	r14
     288:	8e 01       	movw	r16, r28
     28a:	0a 5f       	subi	r16, 0xFA	; 250
     28c:	1f 4f       	sbci	r17, 0xFF	; 255
     28e:	1f 93       	push	r17
     290:	0f 93       	push	r16
     292:	0e 94 9e 05 	call	0xb3c	; 0xb3c <sprintf>
		strcat(str2,str1);						//concatenate numbers together in one string 
     296:	b8 01       	movw	r22, r16
     298:	ce 01       	movw	r24, r28
     29a:	01 96       	adiw	r24, 0x01	; 1
     29c:	0e 94 5a 05 	call	0xab4	; 0xab4 <strcat>
		sprintf( (char*)str1,"%d", arr[1]);
     2a0:	1f 92       	push	r1
     2a2:	df 92       	push	r13
     2a4:	ff 92       	push	r15
     2a6:	ef 92       	push	r14
     2a8:	1f 93       	push	r17
     2aa:	0f 93       	push	r16
     2ac:	0e 94 9e 05 	call	0xb3c	; 0xb3c <sprintf>
		strcat(str2,str1);
     2b0:	b8 01       	movw	r22, r16
     2b2:	ce 01       	movw	r24, r28
     2b4:	01 96       	adiw	r24, 0x01	; 1
     2b6:	0e 94 5a 05 	call	0xab4	; 0xab4 <strcat>
		sprintf( (char*)str1,"%d", arr[2]);
     2ba:	1f 92       	push	r1
     2bc:	bf 92       	push	r11
     2be:	ff 92       	push	r15
     2c0:	ef 92       	push	r14
     2c2:	1f 93       	push	r17
     2c4:	0f 93       	push	r16
     2c6:	0e 94 9e 05 	call	0xb3c	; 0xb3c <sprintf>
		strcat(str2,str1);
     2ca:	b8 01       	movw	r22, r16
     2cc:	ce 01       	movw	r24, r28
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	0e 94 5a 05 	call	0xab4	; 0xab4 <strcat>
		sprintf( (char*)str1,"%d", arr[3]);
     2d4:	1f 92       	push	r1
     2d6:	af 92       	push	r10
     2d8:	ff 92       	push	r15
     2da:	ef 92       	push	r14
     2dc:	1f 93       	push	r17
     2de:	0f 93       	push	r16
     2e0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <sprintf>
		strcat(str2,str1);
     2e4:	b8 01       	movw	r22, r16
     2e6:	ce 01       	movw	r24, r28
     2e8:	01 96       	adiw	r24, 0x01	; 1
     2ea:	0e 94 5a 05 	call	0xab4	; 0xab4 <strcat>
		sprintf( (char*)str1,"%d", arr[4]);
     2ee:	1f 92       	push	r1
     2f0:	cf 92       	push	r12
     2f2:	ff 92       	push	r15
     2f4:	ef 92       	push	r14
     2f6:	1f 93       	push	r17
     2f8:	0f 93       	push	r16
     2fa:	0e 94 9e 05 	call	0xb3c	; 0xb3c <sprintf>
		strcat(str2,str1);
     2fe:	b8 01       	movw	r22, r16
     300:	ce 01       	movw	r24, r28
     302:	01 96       	adiw	r24, 0x01	; 1
     304:	0e 94 5a 05 	call	0xab4	; 0xab4 <strcat>
		 
		 Uint16_t x=0;
		 x = atoi(str2);					//converts string into one number
     308:	ce 01       	movw	r24, r28
     30a:	01 96       	adiw	r24, 0x01	; 1
     30c:	0e 94 3c 05 	call	0xa78	; 0xa78 <atoi>
     310:	8c 01       	movw	r16, r24
		LCD_Clear(); //clear display every loop
     312:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_Clear>
		LCD_Write_String((Uint8_t*)str2);				//write how much each finger bent from 0 to 4
     316:	ce 01       	movw	r24, r28
     318:	01 96       	adiw	r24, 0x01	; 1
     31a:	0e 94 13 03 	call	0x626	; 0x626 <LCD_Write_String>
											//0 for straight, 1 or 2 or 3 for slightly bent, 4 for max bent
		LCD_Write_Character(' ');
     31e:	80 e2       	ldi	r24, 0x20	; 32
     320:	0e 94 c6 02 	call	0x58c	; 0x58c <LCD_Write_Character>
		LCD_Write_Number(x);				//displaying converted number for testing switch cases
     324:	b8 01       	movw	r22, r16
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 26 03 	call	0x64c	; 0x64c <LCD_Write_Number>
		
		//deaf signs
		//each x value has a sign
		//problem:  we make sure that sign do not interfere with each others
		//solved 
		switch(x)
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	de bf       	out	0x3e, r29	; 62
     334:	0f be       	out	0x3f, r0	; 63
     336:	cd bf       	out	0x3d, r28	; 61
     338:	0c 35       	cpi	r16, 0x5C	; 92
     33a:	91 e1       	ldi	r25, 0x11	; 17
     33c:	19 07       	cpc	r17, r25
     33e:	09 f4       	brne	.+2      	; 0x342 <main+0x2a0>
     340:	6d c0       	rjmp	.+218    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     342:	d0 f4       	brcc	.+52     	; 0x378 <main+0x2d6>
     344:	08 32       	cpi	r16, 0x28	; 40
     346:	11 05       	cpc	r17, r1
     348:	09 f4       	brne	.+2      	; 0x34c <main+0x2aa>
     34a:	40 c0       	rjmp	.+128    	; 0x3cc <main+0x32a>
     34c:	40 f4       	brcc	.+16     	; 0x35e <main+0x2bc>
     34e:	01 15       	cp	r16, r1
     350:	11 05       	cpc	r17, r1
     352:	61 f1       	breq	.+88     	; 0x3ac <main+0x30a>
     354:	01 30       	cpi	r16, 0x01	; 1
     356:	11 05       	cpc	r17, r1
     358:	09 f4       	brne	.+2      	; 0x35c <main+0x2ba>
     35a:	68 c0       	rjmp	.+208    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     35c:	77 c0       	rjmp	.+238    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     35e:	08 3b       	cpi	r16, 0xB8	; 184
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	18 07       	cpc	r17, r24
     364:	59 f1       	breq	.+86     	; 0x3bc <main+0x31a>
     366:	08 f4       	brcc	.+2      	; 0x36a <main+0x2c8>
     368:	71 c0       	rjmp	.+226    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     36a:	08 57       	subi	r16, 0x78	; 120
     36c:	14 40       	sbci	r17, 0x04	; 4
     36e:	09 39       	cpi	r16, 0x99	; 153
     370:	18 40       	sbci	r17, 0x08	; 8
     372:	08 f4       	brcc	.+2      	; 0x376 <main+0x2d4>
     374:	43 c0       	rjmp	.+134    	; 0x3fc <main+0x35a>
     376:	6a c0       	rjmp	.+212    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     378:	0c 3f       	cpi	r16, 0xFC	; 252
     37a:	8d e9       	ldi	r24, 0x9D	; 157
     37c:	18 07       	cpc	r17, r24
     37e:	71 f1       	breq	.+92     	; 0x3dc <main+0x33a>
     380:	38 f4       	brcc	.+14     	; 0x390 <main+0x2ee>
     382:	08 5f       	subi	r16, 0xF8	; 248
     384:	1a 42       	sbci	r17, 0x2A	; 42
     386:	01 3f       	cpi	r16, 0xF1	; 241
     388:	15 45       	sbci	r17, 0x55	; 85
     38a:	08 f4       	brcc	.+2      	; 0x38e <main+0x2ec>
     38c:	3f c0       	rjmp	.+126    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     38e:	5e c0       	rjmp	.+188    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     390:	08 3b       	cpi	r16, 0xB8	; 184
     392:	80 ea       	ldi	r24, 0xA0	; 160
     394:	18 07       	cpc	r17, r24
     396:	08 f4       	brcc	.+2      	; 0x39a <main+0x2f8>
     398:	59 c0       	rjmp	.+178    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     39a:	01 35       	cpi	r16, 0x51	; 81
     39c:	99 ea       	ldi	r25, 0xA9	; 169
     39e:	19 07       	cpc	r17, r25
     3a0:	08 f4       	brcc	.+2      	; 0x3a4 <main+0x302>
     3a2:	4c c0       	rjmp	.+152    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     3a4:	0c 39       	cpi	r16, 0x9C	; 156
     3a6:	1d 4a       	sbci	r17, 0xAD	; 173
     3a8:	09 f1       	breq	.+66     	; 0x3ec <main+0x34a>
     3aa:	50 c0       	rjmp	.+160    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
		{
			case 0:
			LCD_Write_Command(0xC0);
     3ac:	80 ec       	ldi	r24, 0xC0	; 192
     3ae:	0e 94 30 02 	call	0x460	; 0x460 <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"HELLO");
     3b2:	83 e6       	ldi	r24, 0x63	; 99
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	0e 94 13 03 	call	0x626	; 0x626 <LCD_Write_String>
			break;
     3ba:	4f c0       	rjmp	.+158    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
			case 440:
			LCD_Write_Command(0xC0);
     3bc:	80 ec       	ldi	r24, 0xC0	; 192
     3be:	0e 94 30 02 	call	0x460	; 0x460 <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"I LOVE YOU");
     3c2:	89 e6       	ldi	r24, 0x69	; 105
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 13 03 	call	0x626	; 0x626 <LCD_Write_String>
			break;
     3ca:	47 c0       	rjmp	.+142    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
			case 40:
			LCD_Write_Command(0xC0);
     3cc:	80 ec       	ldi	r24, 0xC0	; 192
     3ce:	0e 94 30 02 	call	0x460	; 0x460 <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"I REALLY LOVE YOU");
     3d2:	84 e7       	ldi	r24, 0x74	; 116
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 13 03 	call	0x626	; 0x626 <LCD_Write_String>
			break;
     3da:	3f c0       	rjmp	.+126    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
			case 40444:
			LCD_Write_Command(0xC0);
     3dc:	80 ec       	ldi	r24, 0xC0	; 192
     3de:	0e 94 30 02 	call	0x460	; 0x460 <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"YOU");
     3e2:	80 e7       	ldi	r24, 0x70	; 112
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 13 03 	call	0x626	; 0x626 <LCD_Write_String>
			break;
     3ea:	37 c0       	rjmp	.+110    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
			case 44444:
			LCD_Write_Command(0xC0);
     3ec:	80 ec       	ldi	r24, 0xC0	; 192
     3ee:	0e 94 30 02 	call	0x460	; 0x460 <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"YES");
     3f2:	86 e8       	ldi	r24, 0x86	; 134
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 13 03 	call	0x626	; 0x626 <LCD_Write_String>
			break;
     3fa:	2f c0       	rjmp	.+94     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
			case 1144 ... 3344:
			LCD_Write_Command(0xC0);
     3fc:	80 ec       	ldi	r24, 0xC0	; 192
     3fe:	0e 94 30 02 	call	0x460	; 0x460 <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"NO");
     402:	8a e8       	ldi	r24, 0x8A	; 138
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 13 03 	call	0x626	; 0x626 <LCD_Write_String>
			break;
     40a:	27 c0       	rjmp	.+78     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
			case 11000 ... 33000:
			LCD_Write_Command(0xC0);
     40c:	80 ec       	ldi	r24, 0xC0	; 192
     40e:	0e 94 30 02 	call	0x460	; 0x460 <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"PERFECT");
     412:	8d e8       	ldi	r24, 0x8D	; 141
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 13 03 	call	0x626	; 0x626 <LCD_Write_String>
			break;
     41a:	1f c0       	rjmp	.+62     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
			case 4444:
			LCD_Write_Command(0xC0);
     41c:	80 ec       	ldi	r24, 0xC0	; 192
     41e:	0e 94 30 02 	call	0x460	; 0x460 <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"GOOD JOB");
     422:	85 e9       	ldi	r24, 0x95	; 149
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 13 03 	call	0x626	; 0x626 <LCD_Write_String>
			break;
     42a:	17 c0       	rjmp	.+46     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
			case 41444 || 42444 || 43444:
			LCD_Write_Command(0xC0);
     42c:	80 ec       	ldi	r24, 0xC0	; 192
     42e:	0e 94 30 02 	call	0x460	; 0x460 <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"QESTION?");
     432:	8e e9       	ldi	r24, 0x9E	; 158
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 13 03 	call	0x626	; 0x626 <LCD_Write_String>
			break;
     43a:	0f c0       	rjmp	.+30     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
			case 41144 ... 43344:
			LCD_Write_Command(0xC0);
     43c:	80 ec       	ldi	r24, 0xC0	; 192
     43e:	0e 94 30 02 	call	0x460	; 0x460 <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"QOUTES");
     442:	87 ea       	ldi	r24, 0xA7	; 167
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 13 03 	call	0x626	; 0x626 <LCD_Write_String>
			break;
     44a:	07 c0       	rjmp	.+14     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
			default:
			LCD_Write_Command(0xC0);
     44c:	80 ec       	ldi	r24, 0xC0	; 192
     44e:	0e 94 30 02 	call	0x460	; 0x460 <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"LOADING..");
     452:	8e ea       	ldi	r24, 0xAE	; 174
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 13 03 	call	0x626	; 0x626 <LCD_Write_String>
		arr[1]=0;
		arr[2]=0;
		arr[3]=0;
		arr[4]=0;
		
		*str1=0;
     45a:	1e 82       	std	Y+6, r1	; 0x06
		*str2=0;
     45c:	19 82       	std	Y+1, r1	; 0x01
		
		x=0;
		

    }
     45e:	47 ce       	rjmp	.-882    	; 0xee <main+0x4c>

00000460 <LCD_Write_Command>:
void LCD_Clear(void)
{
	LCD_Write_Command(0x01);//Clear Display
}
void LCD_Write_Command(uint8_t command)
{
     460:	cf 93       	push	r28
     462:	c8 2f       	mov	r28, r24
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_RS, LCD_LOW);//Choose Control Register
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	61 e0       	ldi	r22, 0x01	; 1
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_RW, LCD_LOW);//Choose Write on LCD
     46e:	40 e0       	ldi	r20, 0x00	; 0
     470:	62 e0       	ldi	r22, 0x02	; 2
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
     478:	40 e0       	ldi	r20, 0x00	; 0
     47a:	63 e0       	ldi	r22, 0x03	; 3
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
     482:	8f e9       	ldi	r24, 0x9F	; 159
     484:	9f e0       	ldi	r25, 0x0F	; 15
     486:	01 97       	sbiw	r24, 0x01	; 1
     488:	f1 f7       	brne	.-4      	; 0x486 <LCD_Write_Command+0x26>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <LCD_Write_Command+0x2c>
     48c:	00 00       	nop
	_delay_ms(1);
	//Send High Nibble First
	PORTA = ((command)& 0xF0) | (PORTA & 0x0F);
     48e:	8b b3       	in	r24, 0x1b	; 27
     490:	9c 2f       	mov	r25, r28
     492:	90 7f       	andi	r25, 0xF0	; 240
     494:	8f 70       	andi	r24, 0x0F	; 15
     496:	89 2b       	or	r24, r25
     498:	8b bb       	out	0x1b, r24	; 27
	//Send High to Low Pulse
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);//Disable LCD
     49a:	41 e0       	ldi	r20, 0x01	; 1
     49c:	63 e0       	ldi	r22, 0x03	; 3
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
     4a4:	8f e9       	ldi	r24, 0x9F	; 159
     4a6:	9f e0       	ldi	r25, 0x0F	; 15
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	f1 f7       	brne	.-4      	; 0x4a8 <LCD_Write_Command+0x48>
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <LCD_Write_Command+0x4e>
     4ae:	00 00       	nop
	_delay_ms(1); //3shan ydmn enha msh noise
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
     4b0:	40 e0       	ldi	r20, 0x00	; 0
     4b2:	63 e0       	ldi	r22, 0x03	; 3
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
	//Send Low Nibble First
	PORTA = ((command<<4)& 0xF0) | (PORTA & 0x0F);
     4ba:	20 e1       	ldi	r18, 0x10	; 16
     4bc:	c2 9f       	mul	r28, r18
     4be:	c0 01       	movw	r24, r0
     4c0:	11 24       	eor	r1, r1
     4c2:	9b b3       	in	r25, 0x1b	; 27
     4c4:	9f 70       	andi	r25, 0x0F	; 15
     4c6:	89 2b       	or	r24, r25
     4c8:	8b bb       	out	0x1b, r24	; 27
	//Send High to Low Pulse
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);//Disable LCD
     4ca:	41 e0       	ldi	r20, 0x01	; 1
     4cc:	63 e0       	ldi	r22, 0x03	; 3
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
     4d4:	8f e9       	ldi	r24, 0x9F	; 159
     4d6:	9f e0       	ldi	r25, 0x0F	; 15
     4d8:	01 97       	sbiw	r24, 0x01	; 1
     4da:	f1 f7       	brne	.-4      	; 0x4d8 <LCD_Write_Command+0x78>
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <LCD_Write_Command+0x7e>
     4de:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
     4e0:	40 e0       	ldi	r20, 0x00	; 0
     4e2:	63 e0       	ldi	r22, 0x03	; 3
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
     4ea:	8f e3       	ldi	r24, 0x3F	; 63
     4ec:	9f e1       	ldi	r25, 0x1F	; 31
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	f1 f7       	brne	.-4      	; 0x4ee <LCD_Write_Command+0x8e>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <LCD_Write_Command+0x94>
     4f4:	00 00       	nop
	_delay_ms(2);
}
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <LCD_Initialize>:

#include "LCD_Private.h"

void LCD_Initialize(void)
{
	DIO_SetPin_Direction(LCD_CTRL_PRT, LCD_RS, LCD_OUT);
     4fa:	41 e0       	ldi	r20, 0x01	; 1
     4fc:	61 e0       	ldi	r22, 0x01	; 1
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	0e 94 55 04 	call	0x8aa	; 0x8aa <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_CTRL_PRT, LCD_RW, LCD_OUT);
     504:	41 e0       	ldi	r20, 0x01	; 1
     506:	62 e0       	ldi	r22, 0x02	; 2
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	0e 94 55 04 	call	0x8aa	; 0x8aa <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_CTRL_PRT, LCD_EN, LCD_OUT);
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	63 e0       	ldi	r22, 0x03	; 3
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	0e 94 55 04 	call	0x8aa	; 0x8aa <DIO_SetPin_Direction>
			  
	DIO_SetPin_Direction(LCD_DATA_PRT, LCD_D4, LCD_OUT);
     518:	41 e0       	ldi	r20, 0x01	; 1
     51a:	64 e0       	ldi	r22, 0x04	; 4
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	0e 94 55 04 	call	0x8aa	; 0x8aa <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PRT, LCD_D5, LCD_OUT);
     522:	41 e0       	ldi	r20, 0x01	; 1
     524:	65 e0       	ldi	r22, 0x05	; 5
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	0e 94 55 04 	call	0x8aa	; 0x8aa <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PRT, LCD_D6, LCD_OUT);
     52c:	41 e0       	ldi	r20, 0x01	; 1
     52e:	66 e0       	ldi	r22, 0x06	; 6
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	0e 94 55 04 	call	0x8aa	; 0x8aa <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PRT, LCD_D7, LCD_OUT);
     536:	41 e0       	ldi	r20, 0x01	; 1
     538:	67 e0       	ldi	r22, 0x07	; 7
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	0e 94 55 04 	call	0x8aa	; 0x8aa <DIO_SetPin_Direction>
     540:	8f e3       	ldi	r24, 0x3F	; 63
     542:	9f e1       	ldi	r25, 0x1F	; 31
     544:	01 97       	sbiw	r24, 0x01	; 1
     546:	f1 f7       	brne	.-4      	; 0x544 <LCD_Initialize+0x4a>
     548:	00 c0       	rjmp	.+0      	; 0x54a <LCD_Initialize+0x50>
     54a:	00 00       	nop
	
	_delay_ms(2); //3shan mc bta3 kit asra3 mn mc bta3 lcd
	
	LCD_Write_Command(0x33);
     54c:	83 e3       	ldi	r24, 0x33	; 51
     54e:	0e 94 30 02 	call	0x460	; 0x460 <LCD_Write_Command>
	LCD_Write_Command(0x32);
     552:	82 e3       	ldi	r24, 0x32	; 50
     554:	0e 94 30 02 	call	0x460	; 0x460 <LCD_Write_Command>
	LCD_Write_Command(0x28);//4-Bit Mode
     558:	88 e2       	ldi	r24, 0x28	; 40
     55a:	0e 94 30 02 	call	0x460	; 0x460 <LCD_Write_Command>
	LCD_Write_Command(0x01);//Clear Display
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	0e 94 30 02 	call	0x460	; 0x460 <LCD_Write_Command>
	LCD_Write_Command(0x02);//Return Home
     564:	82 e0       	ldi	r24, 0x02	; 2
     566:	0e 94 30 02 	call	0x460	; 0x460 <LCD_Write_Command>
	LCD_Write_Command(0x06);//Return Home
     56a:	86 e0       	ldi	r24, 0x06	; 6
     56c:	0e 94 30 02 	call	0x460	; 0x460 <LCD_Write_Command>
	LCD_Write_Command(0x0C);//Display on, Cursor off
     570:	8c e0       	ldi	r24, 0x0C	; 12
     572:	0e 94 30 02 	call	0x460	; 0x460 <LCD_Write_Command>
     576:	8f e1       	ldi	r24, 0x1F	; 31
     578:	9e e4       	ldi	r25, 0x4E	; 78
     57a:	01 97       	sbiw	r24, 0x01	; 1
     57c:	f1 f7       	brne	.-4      	; 0x57a <LCD_Initialize+0x80>
     57e:	00 c0       	rjmp	.+0      	; 0x580 <LCD_Initialize+0x86>
     580:	00 00       	nop
     582:	08 95       	ret

00000584 <LCD_Clear>:
	
	_delay_ms(5);
}
void LCD_Clear(void)
{
	LCD_Write_Command(0x01);//Clear Display
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	0e 94 30 02 	call	0x460	; 0x460 <LCD_Write_Command>
     58a:	08 95       	ret

0000058c <LCD_Write_Character>:
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
	_delay_ms(2);
}
void LCD_Write_Character(uint8_t character)
{
     58c:	cf 93       	push	r28
     58e:	c8 2f       	mov	r28, r24
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_RS, LCD_HIGH);//Choose Data Register
     590:	41 e0       	ldi	r20, 0x01	; 1
     592:	61 e0       	ldi	r22, 0x01	; 1
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_RW, LCD_LOW);//Choose Write on LCD
     59a:	40 e0       	ldi	r20, 0x00	; 0
     59c:	62 e0       	ldi	r22, 0x02	; 2
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
     5a4:	40 e0       	ldi	r20, 0x00	; 0
     5a6:	63 e0       	ldi	r22, 0x03	; 3
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
     5ae:	8f e9       	ldi	r24, 0x9F	; 159
     5b0:	9f e0       	ldi	r25, 0x0F	; 15
     5b2:	01 97       	sbiw	r24, 0x01	; 1
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <LCD_Write_Character+0x26>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <LCD_Write_Character+0x2c>
     5b8:	00 00       	nop
		_delay_ms(1);
		//Send High Nibble First
		PORTA = ((character)& 0xF0) | (PORTA & 0x0F);
     5ba:	8b b3       	in	r24, 0x1b	; 27
     5bc:	9c 2f       	mov	r25, r28
     5be:	90 7f       	andi	r25, 0xF0	; 240
     5c0:	8f 70       	andi	r24, 0x0F	; 15
     5c2:	89 2b       	or	r24, r25
     5c4:	8b bb       	out	0x1b, r24	; 27
		//Send High to Low Pulse
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);//Disable LCD
     5c6:	41 e0       	ldi	r20, 0x01	; 1
     5c8:	63 e0       	ldi	r22, 0x03	; 3
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
     5d0:	8f e9       	ldi	r24, 0x9F	; 159
     5d2:	9f e0       	ldi	r25, 0x0F	; 15
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <LCD_Write_Character+0x48>
     5d8:	00 c0       	rjmp	.+0      	; 0x5da <LCD_Write_Character+0x4e>
     5da:	00 00       	nop
		_delay_ms(1);
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	63 e0       	ldi	r22, 0x03	; 3
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
		//Send Low Nibble First
		PORTA = ((character<<4)& 0xF0) | (PORTA & 0x0F);
     5e6:	20 e1       	ldi	r18, 0x10	; 16
     5e8:	c2 9f       	mul	r28, r18
     5ea:	c0 01       	movw	r24, r0
     5ec:	11 24       	eor	r1, r1
     5ee:	9b b3       	in	r25, 0x1b	; 27
     5f0:	9f 70       	andi	r25, 0x0F	; 15
     5f2:	89 2b       	or	r24, r25
     5f4:	8b bb       	out	0x1b, r24	; 27
		//Send High to Low Pulse
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);//Disable LCD
     5f6:	41 e0       	ldi	r20, 0x01	; 1
     5f8:	63 e0       	ldi	r22, 0x03	; 3
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
     600:	8f e9       	ldi	r24, 0x9F	; 159
     602:	9f e0       	ldi	r25, 0x0F	; 15
     604:	01 97       	sbiw	r24, 0x01	; 1
     606:	f1 f7       	brne	.-4      	; 0x604 <LCD_Write_Character+0x78>
     608:	00 c0       	rjmp	.+0      	; 0x60a <LCD_Write_Character+0x7e>
     60a:	00 00       	nop
		_delay_ms(1);
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	63 e0       	ldi	r22, 0x03	; 3
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	0e 94 c6 04 	call	0x98c	; 0x98c <DIO_SetPin_Value>
     616:	8f e3       	ldi	r24, 0x3F	; 63
     618:	9f e1       	ldi	r25, 0x1F	; 31
     61a:	01 97       	sbiw	r24, 0x01	; 1
     61c:	f1 f7       	brne	.-4      	; 0x61a <LCD_Write_Character+0x8e>
     61e:	00 c0       	rjmp	.+0      	; 0x620 <LCD_Write_Character+0x94>
     620:	00 00       	nop
		_delay_ms(2);
}
     622:	cf 91       	pop	r28
     624:	08 95       	ret

00000626 <LCD_Write_String>:
void LCD_Write_String(uint8_t* str)
{
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	ec 01       	movw	r28, r24
	while (*str != '\0')//Termination of any string, NULL character
     62c:	09 c0       	rjmp	.+18     	; 0x640 <LCD_Write_String+0x1a>
	{
		LCD_Write_Character(*str);
     62e:	0e 94 c6 02 	call	0x58c	; 0x58c <LCD_Write_Character>
     632:	8f e3       	ldi	r24, 0x3F	; 63
     634:	9f e1       	ldi	r25, 0x1F	; 31
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <LCD_Write_String+0x10>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <LCD_Write_String+0x16>
     63c:	00 00       	nop
		_delay_ms(2);
		str++;
     63e:	21 96       	adiw	r28, 0x01	; 1
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
		_delay_ms(2);
}
void LCD_Write_String(uint8_t* str)
{
	while (*str != '\0')//Termination of any string, NULL character
     640:	88 81       	ld	r24, Y
     642:	81 11       	cpse	r24, r1
     644:	f4 cf       	rjmp	.-24     	; 0x62e <LCD_Write_String+0x8>
	{
		LCD_Write_Character(*str);
		_delay_ms(2);
		str++;
	}
}
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	08 95       	ret

0000064c <LCD_Write_Number>:
void LCD_Write_Number(uint32_t number)
{
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
     654:	2a 97       	sbiw	r28, 0x0a	; 10
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	f8 94       	cli
     65a:	de bf       	out	0x3e, r29	; 62
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
     660:	2a e0       	ldi	r18, 0x0A	; 10
     662:	ae 01       	movw	r20, r28
     664:	4f 5f       	subi	r20, 0xFF	; 255
     666:	5f 4f       	sbci	r21, 0xFF	; 255
     668:	0e 94 65 05 	call	0xaca	; 0xaca <__ltoa_ncheck>
	char num[10];
	ltoa(number, (uint8_t*)num, 10);  //long to ASCII 
	LCD_Write_String((uint8_t*) num);
     66c:	ce 01       	movw	r24, r28
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	0e 94 13 03 	call	0x626	; 0x626 <LCD_Write_String>
}
     674:	2a 96       	adiw	r28, 0x0a	; 10
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	f8 94       	cli
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	cd bf       	out	0x3d, r28	; 61
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <ADC_Initialization>:
#include "ADC_Private.h"

void ADC_Initialization(ADC_Vref vref, ADC_Prescaler prescaler)
{
	// Choose voltage reference
	switch(vref)
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	59 f0       	breq	.+22     	; 0x6a0 <ADC_Initialization+0x1a>
     68a:	18 f0       	brcs	.+6      	; 0x692 <ADC_Initialization+0xc>
     68c:	82 30       	cpi	r24, 0x02	; 2
     68e:	79 f0       	breq	.+30     	; 0x6ae <ADC_Initialization+0x28>
     690:	14 c0       	rjmp	.+40     	; 0x6ba <ADC_Initialization+0x34>
	{
		case AREF:
		clr_bit(ADMUX, REFS1);clr_bit(ADMUX, REFS0);
     692:	87 b1       	in	r24, 0x07	; 7
     694:	8f 77       	andi	r24, 0x7F	; 127
     696:	87 b9       	out	0x07, r24	; 7
     698:	87 b1       	in	r24, 0x07	; 7
     69a:	8f 7b       	andi	r24, 0xBF	; 191
     69c:	87 b9       	out	0x07, r24	; 7
		break;
     69e:	0d c0       	rjmp	.+26     	; 0x6ba <ADC_Initialization+0x34>
		case AVCC:
		clr_bit(ADMUX, REFS1);set_bit(ADMUX, REFS0);
     6a0:	87 b1       	in	r24, 0x07	; 7
     6a2:	8f 77       	andi	r24, 0x7F	; 127
     6a4:	87 b9       	out	0x07, r24	; 7
     6a6:	87 b1       	in	r24, 0x07	; 7
     6a8:	80 64       	ori	r24, 0x40	; 64
     6aa:	87 b9       	out	0x07, r24	; 7
		break;
     6ac:	06 c0       	rjmp	.+12     	; 0x6ba <ADC_Initialization+0x34>
		case INTERNAL:
		set_bit(ADMUX, REFS1);set_bit(ADMUX, REFS0);
     6ae:	87 b1       	in	r24, 0x07	; 7
     6b0:	80 68       	ori	r24, 0x80	; 128
     6b2:	87 b9       	out	0x07, r24	; 7
     6b4:	87 b1       	in	r24, 0x07	; 7
     6b6:	80 64       	ori	r24, 0x40	; 64
     6b8:	87 b9       	out	0x07, r24	; 7
		break;
	}
	// Choose prescaler
	switch (prescaler)
     6ba:	86 2f       	mov	r24, r22
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	88 30       	cpi	r24, 0x08	; 8
     6c0:	91 05       	cpc	r25, r1
     6c2:	08 f0       	brcs	.+2      	; 0x6c6 <ADC_Initialization+0x40>
     6c4:	54 c0       	rjmp	.+168    	; 0x76e <ADC_Initialization+0xe8>
     6c6:	fc 01       	movw	r30, r24
     6c8:	e6 5d       	subi	r30, 0xD6	; 214
     6ca:	ff 4f       	sbci	r31, 0xFF	; 255
     6cc:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__tablejump2__>
	{
		case ADC_PRE1:
		clr_bit(ADCSRA, ADPS2);clr_bit(ADCSRA, ADPS1);clr_bit(ADCSRA, ADPS0);
     6d0:	86 b1       	in	r24, 0x06	; 6
     6d2:	8b 7f       	andi	r24, 0xFB	; 251
     6d4:	86 b9       	out	0x06, r24	; 6
     6d6:	86 b1       	in	r24, 0x06	; 6
     6d8:	8d 7f       	andi	r24, 0xFD	; 253
     6da:	86 b9       	out	0x06, r24	; 6
     6dc:	86 b1       	in	r24, 0x06	; 6
     6de:	8e 7f       	andi	r24, 0xFE	; 254
     6e0:	86 b9       	out	0x06, r24	; 6
		break;
     6e2:	45 c0       	rjmp	.+138    	; 0x76e <ADC_Initialization+0xe8>
		case ADC_PRE2:
		clr_bit(ADCSRA, ADPS2);clr_bit(ADCSRA, ADPS1);set_bit(ADCSRA, ADPS0);
     6e4:	86 b1       	in	r24, 0x06	; 6
     6e6:	8b 7f       	andi	r24, 0xFB	; 251
     6e8:	86 b9       	out	0x06, r24	; 6
     6ea:	86 b1       	in	r24, 0x06	; 6
     6ec:	8d 7f       	andi	r24, 0xFD	; 253
     6ee:	86 b9       	out	0x06, r24	; 6
     6f0:	86 b1       	in	r24, 0x06	; 6
     6f2:	81 60       	ori	r24, 0x01	; 1
     6f4:	86 b9       	out	0x06, r24	; 6
		break;
     6f6:	3b c0       	rjmp	.+118    	; 0x76e <ADC_Initialization+0xe8>
		case ADC_PRE4:
		clr_bit(ADCSRA, ADPS2);set_bit(ADCSRA, ADPS1);clr_bit(ADCSRA, ADPS0);
     6f8:	86 b1       	in	r24, 0x06	; 6
     6fa:	8b 7f       	andi	r24, 0xFB	; 251
     6fc:	86 b9       	out	0x06, r24	; 6
     6fe:	86 b1       	in	r24, 0x06	; 6
     700:	82 60       	ori	r24, 0x02	; 2
     702:	86 b9       	out	0x06, r24	; 6
     704:	86 b1       	in	r24, 0x06	; 6
     706:	8e 7f       	andi	r24, 0xFE	; 254
     708:	86 b9       	out	0x06, r24	; 6
		break;
     70a:	31 c0       	rjmp	.+98     	; 0x76e <ADC_Initialization+0xe8>
		case ADC_PRE8:
		clr_bit(ADCSRA, ADPS2);set_bit(ADCSRA, ADPS1);set_bit(ADCSRA, ADPS0);
     70c:	86 b1       	in	r24, 0x06	; 6
     70e:	8b 7f       	andi	r24, 0xFB	; 251
     710:	86 b9       	out	0x06, r24	; 6
     712:	86 b1       	in	r24, 0x06	; 6
     714:	82 60       	ori	r24, 0x02	; 2
     716:	86 b9       	out	0x06, r24	; 6
     718:	86 b1       	in	r24, 0x06	; 6
     71a:	81 60       	ori	r24, 0x01	; 1
     71c:	86 b9       	out	0x06, r24	; 6
		break;
     71e:	27 c0       	rjmp	.+78     	; 0x76e <ADC_Initialization+0xe8>
		case ADC_PRE16:
		set_bit(ADCSRA, ADPS2);clr_bit(ADCSRA, ADPS1);clr_bit(ADCSRA, ADPS0);
     720:	86 b1       	in	r24, 0x06	; 6
     722:	84 60       	ori	r24, 0x04	; 4
     724:	86 b9       	out	0x06, r24	; 6
     726:	86 b1       	in	r24, 0x06	; 6
     728:	8d 7f       	andi	r24, 0xFD	; 253
     72a:	86 b9       	out	0x06, r24	; 6
     72c:	86 b1       	in	r24, 0x06	; 6
     72e:	8e 7f       	andi	r24, 0xFE	; 254
     730:	86 b9       	out	0x06, r24	; 6
		break;
     732:	1d c0       	rjmp	.+58     	; 0x76e <ADC_Initialization+0xe8>
		case ADC_PRE32:
		set_bit(ADCSRA, ADPS2);clr_bit(ADCSRA, ADPS1);set_bit(ADCSRA, ADPS0);
     734:	86 b1       	in	r24, 0x06	; 6
     736:	84 60       	ori	r24, 0x04	; 4
     738:	86 b9       	out	0x06, r24	; 6
     73a:	86 b1       	in	r24, 0x06	; 6
     73c:	8d 7f       	andi	r24, 0xFD	; 253
     73e:	86 b9       	out	0x06, r24	; 6
     740:	86 b1       	in	r24, 0x06	; 6
     742:	81 60       	ori	r24, 0x01	; 1
     744:	86 b9       	out	0x06, r24	; 6
		break;
     746:	13 c0       	rjmp	.+38     	; 0x76e <ADC_Initialization+0xe8>
		case ADC_PRE64:
		set_bit(ADCSRA, ADPS2);set_bit(ADCSRA, ADPS1);clr_bit(ADCSRA, ADPS0);
     748:	86 b1       	in	r24, 0x06	; 6
     74a:	84 60       	ori	r24, 0x04	; 4
     74c:	86 b9       	out	0x06, r24	; 6
     74e:	86 b1       	in	r24, 0x06	; 6
     750:	82 60       	ori	r24, 0x02	; 2
     752:	86 b9       	out	0x06, r24	; 6
     754:	86 b1       	in	r24, 0x06	; 6
     756:	8e 7f       	andi	r24, 0xFE	; 254
     758:	86 b9       	out	0x06, r24	; 6
		break;
     75a:	09 c0       	rjmp	.+18     	; 0x76e <ADC_Initialization+0xe8>
		case ADC_PRE128:
		set_bit(ADCSRA, ADPS2);set_bit(ADCSRA, ADPS1);set_bit(ADCSRA, ADPS0);
     75c:	86 b1       	in	r24, 0x06	; 6
     75e:	84 60       	ori	r24, 0x04	; 4
     760:	86 b9       	out	0x06, r24	; 6
     762:	86 b1       	in	r24, 0x06	; 6
     764:	82 60       	ori	r24, 0x02	; 2
     766:	86 b9       	out	0x06, r24	; 6
     768:	86 b1       	in	r24, 0x06	; 6
     76a:	81 60       	ori	r24, 0x01	; 1
     76c:	86 b9       	out	0x06, r24	; 6
		break;
	}
	// ADC Enable
	set_bit(ADCSRA, ADEN);
     76e:	86 b1       	in	r24, 0x06	; 6
     770:	80 68       	ori	r24, 0x80	; 128
     772:	86 b9       	out	0x06, r24	; 6
	// ADC interrupt disable
	clr_bit(ADCSRA, ADIE);
     774:	86 b1       	in	r24, 0x06	; 6
     776:	87 7f       	andi	r24, 0xF7	; 247
     778:	86 b9       	out	0x06, r24	; 6
	// ADC auto trigger enable
	set_bit(ADCSRA, ADATE);
     77a:	86 b1       	in	r24, 0x06	; 6
     77c:	80 62       	ori	r24, 0x20	; 32
     77e:	86 b9       	out	0x06, r24	; 6
	// ADC Right adjust
	clr_bit(ADMUX, ADLAR);
     780:	87 b1       	in	r24, 0x07	; 7
     782:	8f 7d       	andi	r24, 0xDF	; 223
     784:	87 b9       	out	0x07, r24	; 7
     786:	08 95       	ret

00000788 <ADC_Read>:
}
Uint16_t ADC_Read(ADC_Channel channel)
{
	uint16_t reading = 0;
	// Choose channel
	switch (channel)
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	88 30       	cpi	r24, 0x08	; 8
     78c:	91 05       	cpc	r25, r1
     78e:	08 f0       	brcs	.+2      	; 0x792 <ADC_Read+0xa>
     790:	84 c0       	rjmp	.+264    	; 0x89a <__stack+0x3b>
     792:	fc 01       	movw	r30, r24
     794:	ee 5c       	subi	r30, 0xCE	; 206
     796:	ff 4f       	sbci	r31, 0xFF	; 255
     798:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__tablejump2__>
	{
		case ADC_CH0:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);clr_bit(ADMUX, MUX2);clr_bit(ADMUX, MUX1);clr_bit(ADMUX, MUX0);// 0 0 0 0 0
     79c:	87 b1       	in	r24, 0x07	; 7
     79e:	8f 7e       	andi	r24, 0xEF	; 239
     7a0:	87 b9       	out	0x07, r24	; 7
     7a2:	87 b1       	in	r24, 0x07	; 7
     7a4:	87 7f       	andi	r24, 0xF7	; 247
     7a6:	87 b9       	out	0x07, r24	; 7
     7a8:	87 b1       	in	r24, 0x07	; 7
     7aa:	8b 7f       	andi	r24, 0xFB	; 251
     7ac:	87 b9       	out	0x07, r24	; 7
     7ae:	87 b1       	in	r24, 0x07	; 7
     7b0:	8d 7f       	andi	r24, 0xFD	; 253
     7b2:	87 b9       	out	0x07, r24	; 7
     7b4:	87 b1       	in	r24, 0x07	; 7
     7b6:	8e 7f       	andi	r24, 0xFE	; 254
     7b8:	87 b9       	out	0x07, r24	; 7
		break;
     7ba:	6f c0       	rjmp	.+222    	; 0x89a <__stack+0x3b>
		case ADC_CH1:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);clr_bit(ADMUX, MUX2);clr_bit(ADMUX, MUX1);set_bit(ADMUX, MUX0);// 0 0 0 0 1
     7bc:	87 b1       	in	r24, 0x07	; 7
     7be:	8f 7e       	andi	r24, 0xEF	; 239
     7c0:	87 b9       	out	0x07, r24	; 7
     7c2:	87 b1       	in	r24, 0x07	; 7
     7c4:	87 7f       	andi	r24, 0xF7	; 247
     7c6:	87 b9       	out	0x07, r24	; 7
     7c8:	87 b1       	in	r24, 0x07	; 7
     7ca:	8b 7f       	andi	r24, 0xFB	; 251
     7cc:	87 b9       	out	0x07, r24	; 7
     7ce:	87 b1       	in	r24, 0x07	; 7
     7d0:	8d 7f       	andi	r24, 0xFD	; 253
     7d2:	87 b9       	out	0x07, r24	; 7
     7d4:	87 b1       	in	r24, 0x07	; 7
     7d6:	81 60       	ori	r24, 0x01	; 1
     7d8:	87 b9       	out	0x07, r24	; 7
		break;
     7da:	5f c0       	rjmp	.+190    	; 0x89a <__stack+0x3b>
		case ADC_CH2:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);clr_bit(ADMUX, MUX2);set_bit(ADMUX, MUX1);clr_bit(ADMUX, MUX0);// 0 0 0 1 0
     7dc:	87 b1       	in	r24, 0x07	; 7
     7de:	8f 7e       	andi	r24, 0xEF	; 239
     7e0:	87 b9       	out	0x07, r24	; 7
     7e2:	87 b1       	in	r24, 0x07	; 7
     7e4:	87 7f       	andi	r24, 0xF7	; 247
     7e6:	87 b9       	out	0x07, r24	; 7
     7e8:	87 b1       	in	r24, 0x07	; 7
     7ea:	8b 7f       	andi	r24, 0xFB	; 251
     7ec:	87 b9       	out	0x07, r24	; 7
     7ee:	87 b1       	in	r24, 0x07	; 7
     7f0:	82 60       	ori	r24, 0x02	; 2
     7f2:	87 b9       	out	0x07, r24	; 7
     7f4:	87 b1       	in	r24, 0x07	; 7
     7f6:	8e 7f       	andi	r24, 0xFE	; 254
     7f8:	87 b9       	out	0x07, r24	; 7
		break;
     7fa:	4f c0       	rjmp	.+158    	; 0x89a <__stack+0x3b>
		case ADC_CH3:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);clr_bit(ADMUX, MUX2);set_bit(ADMUX, MUX1);set_bit(ADMUX, MUX0);// 0 0 0 1 1
     7fc:	87 b1       	in	r24, 0x07	; 7
     7fe:	8f 7e       	andi	r24, 0xEF	; 239
     800:	87 b9       	out	0x07, r24	; 7
     802:	87 b1       	in	r24, 0x07	; 7
     804:	87 7f       	andi	r24, 0xF7	; 247
     806:	87 b9       	out	0x07, r24	; 7
     808:	87 b1       	in	r24, 0x07	; 7
     80a:	8b 7f       	andi	r24, 0xFB	; 251
     80c:	87 b9       	out	0x07, r24	; 7
     80e:	87 b1       	in	r24, 0x07	; 7
     810:	82 60       	ori	r24, 0x02	; 2
     812:	87 b9       	out	0x07, r24	; 7
     814:	87 b1       	in	r24, 0x07	; 7
     816:	81 60       	ori	r24, 0x01	; 1
     818:	87 b9       	out	0x07, r24	; 7
		break;
     81a:	3f c0       	rjmp	.+126    	; 0x89a <__stack+0x3b>
		case ADC_CH4:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);set_bit(ADMUX, MUX2);clr_bit(ADMUX, MUX1);clr_bit(ADMUX, MUX0);// 0 0 1 0 0
     81c:	87 b1       	in	r24, 0x07	; 7
     81e:	8f 7e       	andi	r24, 0xEF	; 239
     820:	87 b9       	out	0x07, r24	; 7
     822:	87 b1       	in	r24, 0x07	; 7
     824:	87 7f       	andi	r24, 0xF7	; 247
     826:	87 b9       	out	0x07, r24	; 7
     828:	87 b1       	in	r24, 0x07	; 7
     82a:	84 60       	ori	r24, 0x04	; 4
     82c:	87 b9       	out	0x07, r24	; 7
     82e:	87 b1       	in	r24, 0x07	; 7
     830:	8d 7f       	andi	r24, 0xFD	; 253
     832:	87 b9       	out	0x07, r24	; 7
     834:	87 b1       	in	r24, 0x07	; 7
     836:	8e 7f       	andi	r24, 0xFE	; 254
     838:	87 b9       	out	0x07, r24	; 7
		break;
     83a:	2f c0       	rjmp	.+94     	; 0x89a <__stack+0x3b>
		case ADC_CH5:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);set_bit(ADMUX, MUX2);clr_bit(ADMUX, MUX1);set_bit(ADMUX, MUX0);// 0 0 1 0 1
     83c:	87 b1       	in	r24, 0x07	; 7
     83e:	8f 7e       	andi	r24, 0xEF	; 239
     840:	87 b9       	out	0x07, r24	; 7
     842:	87 b1       	in	r24, 0x07	; 7
     844:	87 7f       	andi	r24, 0xF7	; 247
     846:	87 b9       	out	0x07, r24	; 7
     848:	87 b1       	in	r24, 0x07	; 7
     84a:	84 60       	ori	r24, 0x04	; 4
     84c:	87 b9       	out	0x07, r24	; 7
     84e:	87 b1       	in	r24, 0x07	; 7
     850:	8d 7f       	andi	r24, 0xFD	; 253
     852:	87 b9       	out	0x07, r24	; 7
     854:	87 b1       	in	r24, 0x07	; 7
     856:	81 60       	ori	r24, 0x01	; 1
     858:	87 b9       	out	0x07, r24	; 7
		break;
     85a:	1f c0       	rjmp	.+62     	; 0x89a <__stack+0x3b>
		case ADC_CH6:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);set_bit(ADMUX, MUX2);set_bit(ADMUX, MUX1);clr_bit(ADMUX, MUX0);// 0 0 1 1 0
     85c:	87 b1       	in	r24, 0x07	; 7
     85e:	8f 7e       	andi	r24, 0xEF	; 239
     860:	87 b9       	out	0x07, r24	; 7
     862:	87 b1       	in	r24, 0x07	; 7
     864:	87 7f       	andi	r24, 0xF7	; 247
     866:	87 b9       	out	0x07, r24	; 7
     868:	87 b1       	in	r24, 0x07	; 7
     86a:	84 60       	ori	r24, 0x04	; 4
     86c:	87 b9       	out	0x07, r24	; 7
     86e:	87 b1       	in	r24, 0x07	; 7
     870:	82 60       	ori	r24, 0x02	; 2
     872:	87 b9       	out	0x07, r24	; 7
     874:	87 b1       	in	r24, 0x07	; 7
     876:	8e 7f       	andi	r24, 0xFE	; 254
     878:	87 b9       	out	0x07, r24	; 7
		break;
     87a:	0f c0       	rjmp	.+30     	; 0x89a <__stack+0x3b>
		case ADC_CH7:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);set_bit(ADMUX, MUX2);set_bit(ADMUX, MUX1);set_bit(ADMUX, MUX0);// 0 0 1 1 1
     87c:	87 b1       	in	r24, 0x07	; 7
     87e:	8f 7e       	andi	r24, 0xEF	; 239
     880:	87 b9       	out	0x07, r24	; 7
     882:	87 b1       	in	r24, 0x07	; 7
     884:	87 7f       	andi	r24, 0xF7	; 247
     886:	87 b9       	out	0x07, r24	; 7
     888:	87 b1       	in	r24, 0x07	; 7
     88a:	84 60       	ori	r24, 0x04	; 4
     88c:	87 b9       	out	0x07, r24	; 7
     88e:	87 b1       	in	r24, 0x07	; 7
     890:	82 60       	ori	r24, 0x02	; 2
     892:	87 b9       	out	0x07, r24	; 7
     894:	87 b1       	in	r24, 0x07	; 7
     896:	81 60       	ori	r24, 0x01	; 1
     898:	87 b9       	out	0x07, r24	; 7
		break;
	}
	// ADC Start conversion 
	set_bit(ADCSRA, ADSC);
     89a:	86 b1       	in	r24, 0x06	; 6
     89c:	80 64       	ori	r24, 0x40	; 64
     89e:	86 b9       	out	0x06, r24	; 6
	// wait until conversion finish
	while (get_bit(ADCSRA, ADIF) == 1)
     8a0:	34 99       	sbic	0x06, 4	; 6
     8a2:	fe cf       	rjmp	.-4      	; 0x8a0 <__stack+0x41>
	{
		
	}
	reading = ADC_DT;
     8a4:	84 b1       	in	r24, 0x04	; 4
     8a6:	95 b1       	in	r25, 0x05	; 5
	
	
	return reading;
     8a8:	08 95       	ret

000008aa <DIO_SetPin_Direction>:

#include "DIO_Private.h"

void DIO_SetPin_Direction(DIO_PORT PORT, DIO_PIN PIN, DIO_STATE STATE)
{
	switch(STATE)
     8aa:	44 23       	and	r20, r20
     8ac:	b9 f1       	breq	.+110    	; 0x91c <DIO_SetPin_Direction+0x72>
     8ae:	41 30       	cpi	r20, 0x01	; 1
     8b0:	09 f0       	breq	.+2      	; 0x8b4 <DIO_SetPin_Direction+0xa>
     8b2:	6b c0       	rjmp	.+214    	; 0x98a <DIO_SetPin_Direction+0xe0>
	{
		case DIO_OUTPUT:
		switch(PORT)
     8b4:	81 30       	cpi	r24, 0x01	; 1
     8b6:	89 f0       	breq	.+34     	; 0x8da <DIO_SetPin_Direction+0x30>
     8b8:	28 f0       	brcs	.+10     	; 0x8c4 <DIO_SetPin_Direction+0x1a>
     8ba:	82 30       	cpi	r24, 0x02	; 2
     8bc:	c9 f0       	breq	.+50     	; 0x8f0 <DIO_SetPin_Direction+0x46>
     8be:	83 30       	cpi	r24, 0x03	; 3
     8c0:	11 f1       	breq	.+68     	; 0x906 <DIO_SetPin_Direction+0x5c>
     8c2:	08 95       	ret
		{
			case DIO_PORTA:
			set_bit(DDRA, PIN);
     8c4:	2a b3       	in	r18, 0x1a	; 26
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <DIO_SetPin_Direction+0x26>
     8cc:	88 0f       	add	r24, r24
     8ce:	99 1f       	adc	r25, r25
     8d0:	6a 95       	dec	r22
     8d2:	e2 f7       	brpl	.-8      	; 0x8cc <DIO_SetPin_Direction+0x22>
     8d4:	82 2b       	or	r24, r18
     8d6:	8a bb       	out	0x1a, r24	; 26
			break;
     8d8:	08 95       	ret
			case DIO_PORTB:
			set_bit(DDRB, PIN);
     8da:	27 b3       	in	r18, 0x17	; 23
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <DIO_SetPin_Direction+0x3c>
     8e2:	88 0f       	add	r24, r24
     8e4:	99 1f       	adc	r25, r25
     8e6:	6a 95       	dec	r22
     8e8:	e2 f7       	brpl	.-8      	; 0x8e2 <DIO_SetPin_Direction+0x38>
     8ea:	82 2b       	or	r24, r18
     8ec:	87 bb       	out	0x17, r24	; 23
			break;
     8ee:	08 95       	ret
			case DIO_PORTC:
			set_bit(DDRC, PIN);
     8f0:	24 b3       	in	r18, 0x14	; 20
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	02 c0       	rjmp	.+4      	; 0x8fc <DIO_SetPin_Direction+0x52>
     8f8:	88 0f       	add	r24, r24
     8fa:	99 1f       	adc	r25, r25
     8fc:	6a 95       	dec	r22
     8fe:	e2 f7       	brpl	.-8      	; 0x8f8 <DIO_SetPin_Direction+0x4e>
     900:	82 2b       	or	r24, r18
     902:	84 bb       	out	0x14, r24	; 20
			break;
     904:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD, PIN);
     906:	21 b3       	in	r18, 0x11	; 17
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	02 c0       	rjmp	.+4      	; 0x912 <DIO_SetPin_Direction+0x68>
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	6a 95       	dec	r22
     914:	e2 f7       	brpl	.-8      	; 0x90e <DIO_SetPin_Direction+0x64>
     916:	82 2b       	or	r24, r18
     918:	81 bb       	out	0x11, r24	; 17
			break;
     91a:	08 95       	ret
		}
		break;
		case DIO_INPUT:
		switch(PORT)
     91c:	81 30       	cpi	r24, 0x01	; 1
     91e:	91 f0       	breq	.+36     	; 0x944 <DIO_SetPin_Direction+0x9a>
     920:	28 f0       	brcs	.+10     	; 0x92c <DIO_SetPin_Direction+0x82>
     922:	82 30       	cpi	r24, 0x02	; 2
     924:	d9 f0       	breq	.+54     	; 0x95c <DIO_SetPin_Direction+0xb2>
     926:	83 30       	cpi	r24, 0x03	; 3
     928:	29 f1       	breq	.+74     	; 0x974 <DIO_SetPin_Direction+0xca>
     92a:	08 95       	ret
		{
			case DIO_PORTA:
			clr_bit(DDRA, PIN);
     92c:	2a b3       	in	r18, 0x1a	; 26
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	02 c0       	rjmp	.+4      	; 0x938 <DIO_SetPin_Direction+0x8e>
     934:	88 0f       	add	r24, r24
     936:	99 1f       	adc	r25, r25
     938:	6a 95       	dec	r22
     93a:	e2 f7       	brpl	.-8      	; 0x934 <DIO_SetPin_Direction+0x8a>
     93c:	80 95       	com	r24
     93e:	82 23       	and	r24, r18
     940:	8a bb       	out	0x1a, r24	; 26
			break;
     942:	08 95       	ret
			case DIO_PORTB:
			clr_bit(DDRB, PIN);
     944:	27 b3       	in	r18, 0x17	; 23
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	02 c0       	rjmp	.+4      	; 0x950 <DIO_SetPin_Direction+0xa6>
     94c:	88 0f       	add	r24, r24
     94e:	99 1f       	adc	r25, r25
     950:	6a 95       	dec	r22
     952:	e2 f7       	brpl	.-8      	; 0x94c <DIO_SetPin_Direction+0xa2>
     954:	80 95       	com	r24
     956:	82 23       	and	r24, r18
     958:	87 bb       	out	0x17, r24	; 23
			break;
     95a:	08 95       	ret
			case DIO_PORTC:
			clr_bit(DDRC, PIN);
     95c:	24 b3       	in	r18, 0x14	; 20
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	02 c0       	rjmp	.+4      	; 0x968 <DIO_SetPin_Direction+0xbe>
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	6a 95       	dec	r22
     96a:	e2 f7       	brpl	.-8      	; 0x964 <DIO_SetPin_Direction+0xba>
     96c:	80 95       	com	r24
     96e:	82 23       	and	r24, r18
     970:	84 bb       	out	0x14, r24	; 20
			break;
     972:	08 95       	ret
			case DIO_PORTD:
			clr_bit(DDRD, PIN);
     974:	21 b3       	in	r18, 0x11	; 17
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	02 c0       	rjmp	.+4      	; 0x980 <DIO_SetPin_Direction+0xd6>
     97c:	88 0f       	add	r24, r24
     97e:	99 1f       	adc	r25, r25
     980:	6a 95       	dec	r22
     982:	e2 f7       	brpl	.-8      	; 0x97c <DIO_SetPin_Direction+0xd2>
     984:	80 95       	com	r24
     986:	82 23       	and	r24, r18
     988:	81 bb       	out	0x11, r24	; 17
     98a:	08 95       	ret

0000098c <DIO_SetPin_Value>:
	}
}

void DIO_SetPin_Value(DIO_PORT PORT, DIO_PIN PIN, DIO_STATUS STATUS)
{
	if(STATUS == DIO_HIGH)
     98c:	41 30       	cpi	r20, 0x01	; 1
     98e:	a1 f5       	brne	.+104    	; 0x9f8 <DIO_SetPin_Value+0x6c>
	{
		switch(PORT)
     990:	81 30       	cpi	r24, 0x01	; 1
     992:	89 f0       	breq	.+34     	; 0x9b6 <DIO_SetPin_Value+0x2a>
     994:	28 f0       	brcs	.+10     	; 0x9a0 <DIO_SetPin_Value+0x14>
     996:	82 30       	cpi	r24, 0x02	; 2
     998:	c9 f0       	breq	.+50     	; 0x9cc <DIO_SetPin_Value+0x40>
     99a:	83 30       	cpi	r24, 0x03	; 3
     99c:	11 f1       	breq	.+68     	; 0x9e2 <DIO_SetPin_Value+0x56>
     99e:	08 95       	ret
		{
			case DIO_PORTA:
			set_bit(PORTA, PIN);
     9a0:	2b b3       	in	r18, 0x1b	; 27
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <DIO_SetPin_Value+0x20>
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	6a 95       	dec	r22
     9ae:	e2 f7       	brpl	.-8      	; 0x9a8 <DIO_SetPin_Value+0x1c>
     9b0:	82 2b       	or	r24, r18
     9b2:	8b bb       	out	0x1b, r24	; 27
			break;
     9b4:	08 95       	ret
			case DIO_PORTB:
			set_bit(PORTB, PIN);
     9b6:	28 b3       	in	r18, 0x18	; 24
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <DIO_SetPin_Value+0x36>
     9be:	88 0f       	add	r24, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	6a 95       	dec	r22
     9c4:	e2 f7       	brpl	.-8      	; 0x9be <DIO_SetPin_Value+0x32>
     9c6:	82 2b       	or	r24, r18
     9c8:	88 bb       	out	0x18, r24	; 24
			break;
     9ca:	08 95       	ret
			case DIO_PORTC:
			set_bit(PORTC, PIN);
     9cc:	25 b3       	in	r18, 0x15	; 21
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <DIO_SetPin_Value+0x4c>
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	6a 95       	dec	r22
     9da:	e2 f7       	brpl	.-8      	; 0x9d4 <DIO_SetPin_Value+0x48>
     9dc:	82 2b       	or	r24, r18
     9de:	85 bb       	out	0x15, r24	; 21
			break;
     9e0:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD, PIN);
     9e2:	22 b3       	in	r18, 0x12	; 18
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	02 c0       	rjmp	.+4      	; 0x9ee <DIO_SetPin_Value+0x62>
     9ea:	88 0f       	add	r24, r24
     9ec:	99 1f       	adc	r25, r25
     9ee:	6a 95       	dec	r22
     9f0:	e2 f7       	brpl	.-8      	; 0x9ea <DIO_SetPin_Value+0x5e>
     9f2:	82 2b       	or	r24, r18
     9f4:	82 bb       	out	0x12, r24	; 18
			break;
     9f6:	08 95       	ret
		}
	}
	else if(STATUS == DIO_LOW)
     9f8:	41 11       	cpse	r20, r1
     9fa:	37 c0       	rjmp	.+110    	; 0xa6a <DIO_SetPin_Value+0xde>
	{
		switch(PORT)
     9fc:	81 30       	cpi	r24, 0x01	; 1
     9fe:	91 f0       	breq	.+36     	; 0xa24 <DIO_SetPin_Value+0x98>
     a00:	28 f0       	brcs	.+10     	; 0xa0c <DIO_SetPin_Value+0x80>
     a02:	82 30       	cpi	r24, 0x02	; 2
     a04:	d9 f0       	breq	.+54     	; 0xa3c <DIO_SetPin_Value+0xb0>
     a06:	83 30       	cpi	r24, 0x03	; 3
     a08:	29 f1       	breq	.+74     	; 0xa54 <DIO_SetPin_Value+0xc8>
     a0a:	08 95       	ret
		{
			case DIO_PORTA:
			clr_bit(PORTA, PIN);
     a0c:	2b b3       	in	r18, 0x1b	; 27
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <DIO_SetPin_Value+0x8c>
     a14:	88 0f       	add	r24, r24
     a16:	99 1f       	adc	r25, r25
     a18:	6a 95       	dec	r22
     a1a:	e2 f7       	brpl	.-8      	; 0xa14 <DIO_SetPin_Value+0x88>
     a1c:	80 95       	com	r24
     a1e:	82 23       	and	r24, r18
     a20:	8b bb       	out	0x1b, r24	; 27
			break;
     a22:	08 95       	ret
			case DIO_PORTB:
			clr_bit(PORTB, PIN);
     a24:	28 b3       	in	r18, 0x18	; 24
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <DIO_SetPin_Value+0xa4>
     a2c:	88 0f       	add	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	6a 95       	dec	r22
     a32:	e2 f7       	brpl	.-8      	; 0xa2c <DIO_SetPin_Value+0xa0>
     a34:	80 95       	com	r24
     a36:	82 23       	and	r24, r18
     a38:	88 bb       	out	0x18, r24	; 24
			break;
     a3a:	08 95       	ret
			case DIO_PORTC:
			clr_bit(PORTC, PIN);
     a3c:	25 b3       	in	r18, 0x15	; 21
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <DIO_SetPin_Value+0xbc>
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	6a 95       	dec	r22
     a4a:	e2 f7       	brpl	.-8      	; 0xa44 <DIO_SetPin_Value+0xb8>
     a4c:	80 95       	com	r24
     a4e:	82 23       	and	r24, r18
     a50:	85 bb       	out	0x15, r24	; 21
			break;
     a52:	08 95       	ret
			case DIO_PORTD:
			clr_bit(PORTD, PIN);
     a54:	22 b3       	in	r18, 0x12	; 18
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <DIO_SetPin_Value+0xd4>
     a5c:	88 0f       	add	r24, r24
     a5e:	99 1f       	adc	r25, r25
     a60:	6a 95       	dec	r22
     a62:	e2 f7       	brpl	.-8      	; 0xa5c <DIO_SetPin_Value+0xd0>
     a64:	80 95       	com	r24
     a66:	82 23       	and	r24, r18
     a68:	82 bb       	out	0x12, r24	; 18
     a6a:	08 95       	ret

00000a6c <__tablejump2__>:
     a6c:	ee 0f       	add	r30, r30
     a6e:	ff 1f       	adc	r31, r31
     a70:	05 90       	lpm	r0, Z+
     a72:	f4 91       	lpm	r31, Z
     a74:	e0 2d       	mov	r30, r0
     a76:	09 94       	ijmp

00000a78 <atoi>:
     a78:	fc 01       	movw	r30, r24
     a7a:	88 27       	eor	r24, r24
     a7c:	99 27       	eor	r25, r25
     a7e:	e8 94       	clt
     a80:	21 91       	ld	r18, Z+
     a82:	20 32       	cpi	r18, 0x20	; 32
     a84:	e9 f3       	breq	.-6      	; 0xa80 <atoi+0x8>
     a86:	29 30       	cpi	r18, 0x09	; 9
     a88:	10 f0       	brcs	.+4      	; 0xa8e <atoi+0x16>
     a8a:	2e 30       	cpi	r18, 0x0E	; 14
     a8c:	c8 f3       	brcs	.-14     	; 0xa80 <atoi+0x8>
     a8e:	2b 32       	cpi	r18, 0x2B	; 43
     a90:	41 f0       	breq	.+16     	; 0xaa2 <atoi+0x2a>
     a92:	2d 32       	cpi	r18, 0x2D	; 45
     a94:	39 f4       	brne	.+14     	; 0xaa4 <atoi+0x2c>
     a96:	68 94       	set
     a98:	04 c0       	rjmp	.+8      	; 0xaa2 <atoi+0x2a>
     a9a:	0e 94 74 05 	call	0xae8	; 0xae8 <__mulhi_const_10>
     a9e:	82 0f       	add	r24, r18
     aa0:	91 1d       	adc	r25, r1
     aa2:	21 91       	ld	r18, Z+
     aa4:	20 53       	subi	r18, 0x30	; 48
     aa6:	2a 30       	cpi	r18, 0x0A	; 10
     aa8:	c0 f3       	brcs	.-16     	; 0xa9a <atoi+0x22>
     aaa:	1e f4       	brtc	.+6      	; 0xab2 <atoi+0x3a>
     aac:	90 95       	com	r25
     aae:	81 95       	neg	r24
     ab0:	9f 4f       	sbci	r25, 0xFF	; 255
     ab2:	08 95       	ret

00000ab4 <strcat>:
     ab4:	fb 01       	movw	r30, r22
     ab6:	dc 01       	movw	r26, r24
     ab8:	0d 90       	ld	r0, X+
     aba:	00 20       	and	r0, r0
     abc:	e9 f7       	brne	.-6      	; 0xab8 <strcat+0x4>
     abe:	11 97       	sbiw	r26, 0x01	; 1
     ac0:	01 90       	ld	r0, Z+
     ac2:	0d 92       	st	X+, r0
     ac4:	00 20       	and	r0, r0
     ac6:	e1 f7       	brne	.-8      	; 0xac0 <strcat+0xc>
     ac8:	08 95       	ret

00000aca <__ltoa_ncheck>:
     aca:	bb 27       	eor	r27, r27
     acc:	2a 30       	cpi	r18, 0x0A	; 10
     ace:	51 f4       	brne	.+20     	; 0xae4 <__ltoa_ncheck+0x1a>
     ad0:	99 23       	and	r25, r25
     ad2:	42 f4       	brpl	.+16     	; 0xae4 <__ltoa_ncheck+0x1a>
     ad4:	bd e2       	ldi	r27, 0x2D	; 45
     ad6:	90 95       	com	r25
     ad8:	80 95       	com	r24
     ada:	70 95       	com	r23
     adc:	61 95       	neg	r22
     ade:	7f 4f       	sbci	r23, 0xFF	; 255
     ae0:	8f 4f       	sbci	r24, 0xFF	; 255
     ae2:	9f 4f       	sbci	r25, 0xFF	; 255
     ae4:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__ultoa_common>

00000ae8 <__mulhi_const_10>:
     ae8:	7a e0       	ldi	r23, 0x0A	; 10
     aea:	97 9f       	mul	r25, r23
     aec:	90 2d       	mov	r25, r0
     aee:	87 9f       	mul	r24, r23
     af0:	80 2d       	mov	r24, r0
     af2:	91 0d       	add	r25, r1
     af4:	11 24       	eor	r1, r1
     af6:	08 95       	ret

00000af8 <__ultoa_ncheck>:
     af8:	bb 27       	eor	r27, r27

00000afa <__ultoa_common>:
     afa:	fa 01       	movw	r30, r20
     afc:	a6 2f       	mov	r26, r22
     afe:	62 17       	cp	r22, r18
     b00:	71 05       	cpc	r23, r1
     b02:	81 05       	cpc	r24, r1
     b04:	91 05       	cpc	r25, r1
     b06:	33 0b       	sbc	r19, r19
     b08:	30 fb       	bst	r19, 0
     b0a:	66 f0       	brts	.+24     	; 0xb24 <__ultoa_common+0x2a>
     b0c:	aa 27       	eor	r26, r26
     b0e:	66 0f       	add	r22, r22
     b10:	77 1f       	adc	r23, r23
     b12:	88 1f       	adc	r24, r24
     b14:	99 1f       	adc	r25, r25
     b16:	aa 1f       	adc	r26, r26
     b18:	a2 17       	cp	r26, r18
     b1a:	10 f0       	brcs	.+4      	; 0xb20 <__ultoa_common+0x26>
     b1c:	a2 1b       	sub	r26, r18
     b1e:	63 95       	inc	r22
     b20:	38 50       	subi	r19, 0x08	; 8
     b22:	a9 f7       	brne	.-22     	; 0xb0e <__ultoa_common+0x14>
     b24:	a0 5d       	subi	r26, 0xD0	; 208
     b26:	aa 33       	cpi	r26, 0x3A	; 58
     b28:	08 f0       	brcs	.+2      	; 0xb2c <__ultoa_common+0x32>
     b2a:	a9 5d       	subi	r26, 0xD9	; 217
     b2c:	a1 93       	st	Z+, r26
     b2e:	36 f7       	brtc	.-52     	; 0xafc <__ultoa_common+0x2>
     b30:	b1 11       	cpse	r27, r1
     b32:	b1 93       	st	Z+, r27
     b34:	10 82       	st	Z, r1
     b36:	ca 01       	movw	r24, r20
     b38:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <strrev>

00000b3c <sprintf>:
     b3c:	ae e0       	ldi	r26, 0x0E	; 14
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	e4 ea       	ldi	r30, 0xA4	; 164
     b42:	f5 e0       	ldi	r31, 0x05	; 5
     b44:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__prologue_saves__+0x1c>
     b48:	0d 89       	ldd	r16, Y+21	; 0x15
     b4a:	1e 89       	ldd	r17, Y+22	; 0x16
     b4c:	86 e0       	ldi	r24, 0x06	; 6
     b4e:	8c 83       	std	Y+4, r24	; 0x04
     b50:	1a 83       	std	Y+2, r17	; 0x02
     b52:	09 83       	std	Y+1, r16	; 0x01
     b54:	8f ef       	ldi	r24, 0xFF	; 255
     b56:	9f e7       	ldi	r25, 0x7F	; 127
     b58:	9e 83       	std	Y+6, r25	; 0x06
     b5a:	8d 83       	std	Y+5, r24	; 0x05
     b5c:	ae 01       	movw	r20, r28
     b5e:	47 5e       	subi	r20, 0xE7	; 231
     b60:	5f 4f       	sbci	r21, 0xFF	; 255
     b62:	6f 89       	ldd	r22, Y+23	; 0x17
     b64:	78 8d       	ldd	r23, Y+24	; 0x18
     b66:	ce 01       	movw	r24, r28
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	0e 94 c0 05 	call	0xb80	; 0xb80 <vfprintf>
     b6e:	ef 81       	ldd	r30, Y+7	; 0x07
     b70:	f8 85       	ldd	r31, Y+8	; 0x08
     b72:	e0 0f       	add	r30, r16
     b74:	f1 1f       	adc	r31, r17
     b76:	10 82       	st	Z, r1
     b78:	2e 96       	adiw	r28, 0x0e	; 14
     b7a:	e4 e0       	ldi	r30, 0x04	; 4
     b7c:	0c 94 8b 08 	jmp	0x1116	; 0x1116 <__epilogue_restores__+0x1c>

00000b80 <vfprintf>:
     b80:	ab e0       	ldi	r26, 0x0B	; 11
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e6 ec       	ldi	r30, 0xC6	; 198
     b86:	f5 e0       	ldi	r31, 0x05	; 5
     b88:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__prologue_saves__>
     b8c:	6c 01       	movw	r12, r24
     b8e:	7b 01       	movw	r14, r22
     b90:	8a 01       	movw	r16, r20
     b92:	fc 01       	movw	r30, r24
     b94:	17 82       	std	Z+7, r1	; 0x07
     b96:	16 82       	std	Z+6, r1	; 0x06
     b98:	83 81       	ldd	r24, Z+3	; 0x03
     b9a:	81 ff       	sbrs	r24, 1
     b9c:	cc c1       	rjmp	.+920    	; 0xf36 <vfprintf+0x3b6>
     b9e:	ce 01       	movw	r24, r28
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	3c 01       	movw	r6, r24
     ba4:	f6 01       	movw	r30, r12
     ba6:	93 81       	ldd	r25, Z+3	; 0x03
     ba8:	f7 01       	movw	r30, r14
     baa:	93 fd       	sbrc	r25, 3
     bac:	85 91       	lpm	r24, Z+
     bae:	93 ff       	sbrs	r25, 3
     bb0:	81 91       	ld	r24, Z+
     bb2:	7f 01       	movw	r14, r30
     bb4:	88 23       	and	r24, r24
     bb6:	09 f4       	brne	.+2      	; 0xbba <vfprintf+0x3a>
     bb8:	ba c1       	rjmp	.+884    	; 0xf2e <vfprintf+0x3ae>
     bba:	85 32       	cpi	r24, 0x25	; 37
     bbc:	39 f4       	brne	.+14     	; 0xbcc <vfprintf+0x4c>
     bbe:	93 fd       	sbrc	r25, 3
     bc0:	85 91       	lpm	r24, Z+
     bc2:	93 ff       	sbrs	r25, 3
     bc4:	81 91       	ld	r24, Z+
     bc6:	7f 01       	movw	r14, r30
     bc8:	85 32       	cpi	r24, 0x25	; 37
     bca:	29 f4       	brne	.+10     	; 0xbd6 <vfprintf+0x56>
     bcc:	b6 01       	movw	r22, r12
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 c7 07 	call	0xf8e	; 0xf8e <fputc>
     bd4:	e7 cf       	rjmp	.-50     	; 0xba4 <vfprintf+0x24>
     bd6:	91 2c       	mov	r9, r1
     bd8:	21 2c       	mov	r2, r1
     bda:	31 2c       	mov	r3, r1
     bdc:	ff e1       	ldi	r31, 0x1F	; 31
     bde:	f3 15       	cp	r31, r3
     be0:	d8 f0       	brcs	.+54     	; 0xc18 <vfprintf+0x98>
     be2:	8b 32       	cpi	r24, 0x2B	; 43
     be4:	79 f0       	breq	.+30     	; 0xc04 <vfprintf+0x84>
     be6:	38 f4       	brcc	.+14     	; 0xbf6 <vfprintf+0x76>
     be8:	80 32       	cpi	r24, 0x20	; 32
     bea:	79 f0       	breq	.+30     	; 0xc0a <vfprintf+0x8a>
     bec:	83 32       	cpi	r24, 0x23	; 35
     bee:	a1 f4       	brne	.+40     	; 0xc18 <vfprintf+0x98>
     bf0:	23 2d       	mov	r18, r3
     bf2:	20 61       	ori	r18, 0x10	; 16
     bf4:	1d c0       	rjmp	.+58     	; 0xc30 <vfprintf+0xb0>
     bf6:	8d 32       	cpi	r24, 0x2D	; 45
     bf8:	61 f0       	breq	.+24     	; 0xc12 <vfprintf+0x92>
     bfa:	80 33       	cpi	r24, 0x30	; 48
     bfc:	69 f4       	brne	.+26     	; 0xc18 <vfprintf+0x98>
     bfe:	23 2d       	mov	r18, r3
     c00:	21 60       	ori	r18, 0x01	; 1
     c02:	16 c0       	rjmp	.+44     	; 0xc30 <vfprintf+0xb0>
     c04:	83 2d       	mov	r24, r3
     c06:	82 60       	ori	r24, 0x02	; 2
     c08:	38 2e       	mov	r3, r24
     c0a:	e3 2d       	mov	r30, r3
     c0c:	e4 60       	ori	r30, 0x04	; 4
     c0e:	3e 2e       	mov	r3, r30
     c10:	2a c0       	rjmp	.+84     	; 0xc66 <vfprintf+0xe6>
     c12:	f3 2d       	mov	r31, r3
     c14:	f8 60       	ori	r31, 0x08	; 8
     c16:	1d c0       	rjmp	.+58     	; 0xc52 <vfprintf+0xd2>
     c18:	37 fc       	sbrc	r3, 7
     c1a:	2d c0       	rjmp	.+90     	; 0xc76 <vfprintf+0xf6>
     c1c:	20 ed       	ldi	r18, 0xD0	; 208
     c1e:	28 0f       	add	r18, r24
     c20:	2a 30       	cpi	r18, 0x0A	; 10
     c22:	40 f0       	brcs	.+16     	; 0xc34 <vfprintf+0xb4>
     c24:	8e 32       	cpi	r24, 0x2E	; 46
     c26:	b9 f4       	brne	.+46     	; 0xc56 <vfprintf+0xd6>
     c28:	36 fc       	sbrc	r3, 6
     c2a:	81 c1       	rjmp	.+770    	; 0xf2e <vfprintf+0x3ae>
     c2c:	23 2d       	mov	r18, r3
     c2e:	20 64       	ori	r18, 0x40	; 64
     c30:	32 2e       	mov	r3, r18
     c32:	19 c0       	rjmp	.+50     	; 0xc66 <vfprintf+0xe6>
     c34:	36 fe       	sbrs	r3, 6
     c36:	06 c0       	rjmp	.+12     	; 0xc44 <vfprintf+0xc4>
     c38:	8a e0       	ldi	r24, 0x0A	; 10
     c3a:	98 9e       	mul	r9, r24
     c3c:	20 0d       	add	r18, r0
     c3e:	11 24       	eor	r1, r1
     c40:	92 2e       	mov	r9, r18
     c42:	11 c0       	rjmp	.+34     	; 0xc66 <vfprintf+0xe6>
     c44:	ea e0       	ldi	r30, 0x0A	; 10
     c46:	2e 9e       	mul	r2, r30
     c48:	20 0d       	add	r18, r0
     c4a:	11 24       	eor	r1, r1
     c4c:	22 2e       	mov	r2, r18
     c4e:	f3 2d       	mov	r31, r3
     c50:	f0 62       	ori	r31, 0x20	; 32
     c52:	3f 2e       	mov	r3, r31
     c54:	08 c0       	rjmp	.+16     	; 0xc66 <vfprintf+0xe6>
     c56:	8c 36       	cpi	r24, 0x6C	; 108
     c58:	21 f4       	brne	.+8      	; 0xc62 <vfprintf+0xe2>
     c5a:	83 2d       	mov	r24, r3
     c5c:	80 68       	ori	r24, 0x80	; 128
     c5e:	38 2e       	mov	r3, r24
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <vfprintf+0xe6>
     c62:	88 36       	cpi	r24, 0x68	; 104
     c64:	41 f4       	brne	.+16     	; 0xc76 <vfprintf+0xf6>
     c66:	f7 01       	movw	r30, r14
     c68:	93 fd       	sbrc	r25, 3
     c6a:	85 91       	lpm	r24, Z+
     c6c:	93 ff       	sbrs	r25, 3
     c6e:	81 91       	ld	r24, Z+
     c70:	7f 01       	movw	r14, r30
     c72:	81 11       	cpse	r24, r1
     c74:	b3 cf       	rjmp	.-154    	; 0xbdc <vfprintf+0x5c>
     c76:	98 2f       	mov	r25, r24
     c78:	9f 7d       	andi	r25, 0xDF	; 223
     c7a:	95 54       	subi	r25, 0x45	; 69
     c7c:	93 30       	cpi	r25, 0x03	; 3
     c7e:	28 f4       	brcc	.+10     	; 0xc8a <vfprintf+0x10a>
     c80:	0c 5f       	subi	r16, 0xFC	; 252
     c82:	1f 4f       	sbci	r17, 0xFF	; 255
     c84:	9f e3       	ldi	r25, 0x3F	; 63
     c86:	99 83       	std	Y+1, r25	; 0x01
     c88:	0d c0       	rjmp	.+26     	; 0xca4 <vfprintf+0x124>
     c8a:	83 36       	cpi	r24, 0x63	; 99
     c8c:	31 f0       	breq	.+12     	; 0xc9a <vfprintf+0x11a>
     c8e:	83 37       	cpi	r24, 0x73	; 115
     c90:	71 f0       	breq	.+28     	; 0xcae <vfprintf+0x12e>
     c92:	83 35       	cpi	r24, 0x53	; 83
     c94:	09 f0       	breq	.+2      	; 0xc98 <vfprintf+0x118>
     c96:	59 c0       	rjmp	.+178    	; 0xd4a <vfprintf+0x1ca>
     c98:	21 c0       	rjmp	.+66     	; 0xcdc <vfprintf+0x15c>
     c9a:	f8 01       	movw	r30, r16
     c9c:	80 81       	ld	r24, Z
     c9e:	89 83       	std	Y+1, r24	; 0x01
     ca0:	0e 5f       	subi	r16, 0xFE	; 254
     ca2:	1f 4f       	sbci	r17, 0xFF	; 255
     ca4:	88 24       	eor	r8, r8
     ca6:	83 94       	inc	r8
     ca8:	91 2c       	mov	r9, r1
     caa:	53 01       	movw	r10, r6
     cac:	13 c0       	rjmp	.+38     	; 0xcd4 <vfprintf+0x154>
     cae:	28 01       	movw	r4, r16
     cb0:	f2 e0       	ldi	r31, 0x02	; 2
     cb2:	4f 0e       	add	r4, r31
     cb4:	51 1c       	adc	r5, r1
     cb6:	f8 01       	movw	r30, r16
     cb8:	a0 80       	ld	r10, Z
     cba:	b1 80       	ldd	r11, Z+1	; 0x01
     cbc:	36 fe       	sbrs	r3, 6
     cbe:	03 c0       	rjmp	.+6      	; 0xcc6 <vfprintf+0x146>
     cc0:	69 2d       	mov	r22, r9
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <vfprintf+0x14a>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	c5 01       	movw	r24, r10
     ccc:	0e 94 ac 07 	call	0xf58	; 0xf58 <strnlen>
     cd0:	4c 01       	movw	r8, r24
     cd2:	82 01       	movw	r16, r4
     cd4:	f3 2d       	mov	r31, r3
     cd6:	ff 77       	andi	r31, 0x7F	; 127
     cd8:	3f 2e       	mov	r3, r31
     cda:	16 c0       	rjmp	.+44     	; 0xd08 <vfprintf+0x188>
     cdc:	28 01       	movw	r4, r16
     cde:	22 e0       	ldi	r18, 0x02	; 2
     ce0:	42 0e       	add	r4, r18
     ce2:	51 1c       	adc	r5, r1
     ce4:	f8 01       	movw	r30, r16
     ce6:	a0 80       	ld	r10, Z
     ce8:	b1 80       	ldd	r11, Z+1	; 0x01
     cea:	36 fe       	sbrs	r3, 6
     cec:	03 c0       	rjmp	.+6      	; 0xcf4 <vfprintf+0x174>
     cee:	69 2d       	mov	r22, r9
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <vfprintf+0x178>
     cf4:	6f ef       	ldi	r22, 0xFF	; 255
     cf6:	7f ef       	ldi	r23, 0xFF	; 255
     cf8:	c5 01       	movw	r24, r10
     cfa:	0e 94 a1 07 	call	0xf42	; 0xf42 <strnlen_P>
     cfe:	4c 01       	movw	r8, r24
     d00:	f3 2d       	mov	r31, r3
     d02:	f0 68       	ori	r31, 0x80	; 128
     d04:	3f 2e       	mov	r3, r31
     d06:	82 01       	movw	r16, r4
     d08:	33 fc       	sbrc	r3, 3
     d0a:	1b c0       	rjmp	.+54     	; 0xd42 <vfprintf+0x1c2>
     d0c:	82 2d       	mov	r24, r2
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	88 16       	cp	r8, r24
     d12:	99 06       	cpc	r9, r25
     d14:	b0 f4       	brcc	.+44     	; 0xd42 <vfprintf+0x1c2>
     d16:	b6 01       	movw	r22, r12
     d18:	80 e2       	ldi	r24, 0x20	; 32
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 c7 07 	call	0xf8e	; 0xf8e <fputc>
     d20:	2a 94       	dec	r2
     d22:	f4 cf       	rjmp	.-24     	; 0xd0c <vfprintf+0x18c>
     d24:	f5 01       	movw	r30, r10
     d26:	37 fc       	sbrc	r3, 7
     d28:	85 91       	lpm	r24, Z+
     d2a:	37 fe       	sbrs	r3, 7
     d2c:	81 91       	ld	r24, Z+
     d2e:	5f 01       	movw	r10, r30
     d30:	b6 01       	movw	r22, r12
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	0e 94 c7 07 	call	0xf8e	; 0xf8e <fputc>
     d38:	21 10       	cpse	r2, r1
     d3a:	2a 94       	dec	r2
     d3c:	21 e0       	ldi	r18, 0x01	; 1
     d3e:	82 1a       	sub	r8, r18
     d40:	91 08       	sbc	r9, r1
     d42:	81 14       	cp	r8, r1
     d44:	91 04       	cpc	r9, r1
     d46:	71 f7       	brne	.-36     	; 0xd24 <vfprintf+0x1a4>
     d48:	e8 c0       	rjmp	.+464    	; 0xf1a <vfprintf+0x39a>
     d4a:	84 36       	cpi	r24, 0x64	; 100
     d4c:	11 f0       	breq	.+4      	; 0xd52 <vfprintf+0x1d2>
     d4e:	89 36       	cpi	r24, 0x69	; 105
     d50:	41 f5       	brne	.+80     	; 0xda2 <vfprintf+0x222>
     d52:	f8 01       	movw	r30, r16
     d54:	37 fe       	sbrs	r3, 7
     d56:	07 c0       	rjmp	.+14     	; 0xd66 <vfprintf+0x1e6>
     d58:	60 81       	ld	r22, Z
     d5a:	71 81       	ldd	r23, Z+1	; 0x01
     d5c:	82 81       	ldd	r24, Z+2	; 0x02
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	0c 5f       	subi	r16, 0xFC	; 252
     d62:	1f 4f       	sbci	r17, 0xFF	; 255
     d64:	08 c0       	rjmp	.+16     	; 0xd76 <vfprintf+0x1f6>
     d66:	60 81       	ld	r22, Z
     d68:	71 81       	ldd	r23, Z+1	; 0x01
     d6a:	07 2e       	mov	r0, r23
     d6c:	00 0c       	add	r0, r0
     d6e:	88 0b       	sbc	r24, r24
     d70:	99 0b       	sbc	r25, r25
     d72:	0e 5f       	subi	r16, 0xFE	; 254
     d74:	1f 4f       	sbci	r17, 0xFF	; 255
     d76:	f3 2d       	mov	r31, r3
     d78:	ff 76       	andi	r31, 0x6F	; 111
     d7a:	3f 2e       	mov	r3, r31
     d7c:	97 ff       	sbrs	r25, 7
     d7e:	09 c0       	rjmp	.+18     	; 0xd92 <vfprintf+0x212>
     d80:	90 95       	com	r25
     d82:	80 95       	com	r24
     d84:	70 95       	com	r23
     d86:	61 95       	neg	r22
     d88:	7f 4f       	sbci	r23, 0xFF	; 255
     d8a:	8f 4f       	sbci	r24, 0xFF	; 255
     d8c:	9f 4f       	sbci	r25, 0xFF	; 255
     d8e:	f0 68       	ori	r31, 0x80	; 128
     d90:	3f 2e       	mov	r3, r31
     d92:	2a e0       	ldi	r18, 0x0A	; 10
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	a3 01       	movw	r20, r6
     d98:	0e 94 03 08 	call	0x1006	; 0x1006 <__ultoa_invert>
     d9c:	88 2e       	mov	r8, r24
     d9e:	86 18       	sub	r8, r6
     da0:	45 c0       	rjmp	.+138    	; 0xe2c <vfprintf+0x2ac>
     da2:	85 37       	cpi	r24, 0x75	; 117
     da4:	31 f4       	brne	.+12     	; 0xdb2 <vfprintf+0x232>
     da6:	23 2d       	mov	r18, r3
     da8:	2f 7e       	andi	r18, 0xEF	; 239
     daa:	b2 2e       	mov	r11, r18
     dac:	2a e0       	ldi	r18, 0x0A	; 10
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	25 c0       	rjmp	.+74     	; 0xdfc <vfprintf+0x27c>
     db2:	93 2d       	mov	r25, r3
     db4:	99 7f       	andi	r25, 0xF9	; 249
     db6:	b9 2e       	mov	r11, r25
     db8:	8f 36       	cpi	r24, 0x6F	; 111
     dba:	c1 f0       	breq	.+48     	; 0xdec <vfprintf+0x26c>
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <vfprintf+0x244>
     dbe:	88 35       	cpi	r24, 0x58	; 88
     dc0:	79 f0       	breq	.+30     	; 0xde0 <vfprintf+0x260>
     dc2:	b5 c0       	rjmp	.+362    	; 0xf2e <vfprintf+0x3ae>
     dc4:	80 37       	cpi	r24, 0x70	; 112
     dc6:	19 f0       	breq	.+6      	; 0xdce <vfprintf+0x24e>
     dc8:	88 37       	cpi	r24, 0x78	; 120
     dca:	21 f0       	breq	.+8      	; 0xdd4 <vfprintf+0x254>
     dcc:	b0 c0       	rjmp	.+352    	; 0xf2e <vfprintf+0x3ae>
     dce:	e9 2f       	mov	r30, r25
     dd0:	e0 61       	ori	r30, 0x10	; 16
     dd2:	be 2e       	mov	r11, r30
     dd4:	b4 fe       	sbrs	r11, 4
     dd6:	0d c0       	rjmp	.+26     	; 0xdf2 <vfprintf+0x272>
     dd8:	fb 2d       	mov	r31, r11
     dda:	f4 60       	ori	r31, 0x04	; 4
     ddc:	bf 2e       	mov	r11, r31
     dde:	09 c0       	rjmp	.+18     	; 0xdf2 <vfprintf+0x272>
     de0:	34 fe       	sbrs	r3, 4
     de2:	0a c0       	rjmp	.+20     	; 0xdf8 <vfprintf+0x278>
     de4:	29 2f       	mov	r18, r25
     de6:	26 60       	ori	r18, 0x06	; 6
     de8:	b2 2e       	mov	r11, r18
     dea:	06 c0       	rjmp	.+12     	; 0xdf8 <vfprintf+0x278>
     dec:	28 e0       	ldi	r18, 0x08	; 8
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	05 c0       	rjmp	.+10     	; 0xdfc <vfprintf+0x27c>
     df2:	20 e1       	ldi	r18, 0x10	; 16
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <vfprintf+0x27c>
     df8:	20 e1       	ldi	r18, 0x10	; 16
     dfa:	32 e0       	ldi	r19, 0x02	; 2
     dfc:	f8 01       	movw	r30, r16
     dfe:	b7 fe       	sbrs	r11, 7
     e00:	07 c0       	rjmp	.+14     	; 0xe10 <vfprintf+0x290>
     e02:	60 81       	ld	r22, Z
     e04:	71 81       	ldd	r23, Z+1	; 0x01
     e06:	82 81       	ldd	r24, Z+2	; 0x02
     e08:	93 81       	ldd	r25, Z+3	; 0x03
     e0a:	0c 5f       	subi	r16, 0xFC	; 252
     e0c:	1f 4f       	sbci	r17, 0xFF	; 255
     e0e:	06 c0       	rjmp	.+12     	; 0xe1c <vfprintf+0x29c>
     e10:	60 81       	ld	r22, Z
     e12:	71 81       	ldd	r23, Z+1	; 0x01
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 5f       	subi	r16, 0xFE	; 254
     e1a:	1f 4f       	sbci	r17, 0xFF	; 255
     e1c:	a3 01       	movw	r20, r6
     e1e:	0e 94 03 08 	call	0x1006	; 0x1006 <__ultoa_invert>
     e22:	88 2e       	mov	r8, r24
     e24:	86 18       	sub	r8, r6
     e26:	fb 2d       	mov	r31, r11
     e28:	ff 77       	andi	r31, 0x7F	; 127
     e2a:	3f 2e       	mov	r3, r31
     e2c:	36 fe       	sbrs	r3, 6
     e2e:	0d c0       	rjmp	.+26     	; 0xe4a <vfprintf+0x2ca>
     e30:	23 2d       	mov	r18, r3
     e32:	2e 7f       	andi	r18, 0xFE	; 254
     e34:	a2 2e       	mov	r10, r18
     e36:	89 14       	cp	r8, r9
     e38:	58 f4       	brcc	.+22     	; 0xe50 <vfprintf+0x2d0>
     e3a:	34 fe       	sbrs	r3, 4
     e3c:	0b c0       	rjmp	.+22     	; 0xe54 <vfprintf+0x2d4>
     e3e:	32 fc       	sbrc	r3, 2
     e40:	09 c0       	rjmp	.+18     	; 0xe54 <vfprintf+0x2d4>
     e42:	83 2d       	mov	r24, r3
     e44:	8e 7e       	andi	r24, 0xEE	; 238
     e46:	a8 2e       	mov	r10, r24
     e48:	05 c0       	rjmp	.+10     	; 0xe54 <vfprintf+0x2d4>
     e4a:	b8 2c       	mov	r11, r8
     e4c:	a3 2c       	mov	r10, r3
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <vfprintf+0x2d6>
     e50:	b8 2c       	mov	r11, r8
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <vfprintf+0x2d6>
     e54:	b9 2c       	mov	r11, r9
     e56:	a4 fe       	sbrs	r10, 4
     e58:	0f c0       	rjmp	.+30     	; 0xe78 <vfprintf+0x2f8>
     e5a:	fe 01       	movw	r30, r28
     e5c:	e8 0d       	add	r30, r8
     e5e:	f1 1d       	adc	r31, r1
     e60:	80 81       	ld	r24, Z
     e62:	80 33       	cpi	r24, 0x30	; 48
     e64:	21 f4       	brne	.+8      	; 0xe6e <vfprintf+0x2ee>
     e66:	9a 2d       	mov	r25, r10
     e68:	99 7e       	andi	r25, 0xE9	; 233
     e6a:	a9 2e       	mov	r10, r25
     e6c:	09 c0       	rjmp	.+18     	; 0xe80 <vfprintf+0x300>
     e6e:	a2 fe       	sbrs	r10, 2
     e70:	06 c0       	rjmp	.+12     	; 0xe7e <vfprintf+0x2fe>
     e72:	b3 94       	inc	r11
     e74:	b3 94       	inc	r11
     e76:	04 c0       	rjmp	.+8      	; 0xe80 <vfprintf+0x300>
     e78:	8a 2d       	mov	r24, r10
     e7a:	86 78       	andi	r24, 0x86	; 134
     e7c:	09 f0       	breq	.+2      	; 0xe80 <vfprintf+0x300>
     e7e:	b3 94       	inc	r11
     e80:	a3 fc       	sbrc	r10, 3
     e82:	11 c0       	rjmp	.+34     	; 0xea6 <vfprintf+0x326>
     e84:	a0 fe       	sbrs	r10, 0
     e86:	06 c0       	rjmp	.+12     	; 0xe94 <vfprintf+0x314>
     e88:	b2 14       	cp	r11, r2
     e8a:	88 f4       	brcc	.+34     	; 0xeae <vfprintf+0x32e>
     e8c:	28 0c       	add	r2, r8
     e8e:	92 2c       	mov	r9, r2
     e90:	9b 18       	sub	r9, r11
     e92:	0e c0       	rjmp	.+28     	; 0xeb0 <vfprintf+0x330>
     e94:	b2 14       	cp	r11, r2
     e96:	60 f4       	brcc	.+24     	; 0xeb0 <vfprintf+0x330>
     e98:	b6 01       	movw	r22, r12
     e9a:	80 e2       	ldi	r24, 0x20	; 32
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <fputc>
     ea2:	b3 94       	inc	r11
     ea4:	f7 cf       	rjmp	.-18     	; 0xe94 <vfprintf+0x314>
     ea6:	b2 14       	cp	r11, r2
     ea8:	18 f4       	brcc	.+6      	; 0xeb0 <vfprintf+0x330>
     eaa:	2b 18       	sub	r2, r11
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <vfprintf+0x332>
     eae:	98 2c       	mov	r9, r8
     eb0:	21 2c       	mov	r2, r1
     eb2:	a4 fe       	sbrs	r10, 4
     eb4:	10 c0       	rjmp	.+32     	; 0xed6 <vfprintf+0x356>
     eb6:	b6 01       	movw	r22, r12
     eb8:	80 e3       	ldi	r24, 0x30	; 48
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 c7 07 	call	0xf8e	; 0xf8e <fputc>
     ec0:	a2 fe       	sbrs	r10, 2
     ec2:	17 c0       	rjmp	.+46     	; 0xef2 <vfprintf+0x372>
     ec4:	a1 fc       	sbrc	r10, 1
     ec6:	03 c0       	rjmp	.+6      	; 0xece <vfprintf+0x34e>
     ec8:	88 e7       	ldi	r24, 0x78	; 120
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <vfprintf+0x352>
     ece:	88 e5       	ldi	r24, 0x58	; 88
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	b6 01       	movw	r22, r12
     ed4:	0c c0       	rjmp	.+24     	; 0xeee <vfprintf+0x36e>
     ed6:	8a 2d       	mov	r24, r10
     ed8:	86 78       	andi	r24, 0x86	; 134
     eda:	59 f0       	breq	.+22     	; 0xef2 <vfprintf+0x372>
     edc:	a1 fe       	sbrs	r10, 1
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <vfprintf+0x364>
     ee0:	8b e2       	ldi	r24, 0x2B	; 43
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <vfprintf+0x366>
     ee4:	80 e2       	ldi	r24, 0x20	; 32
     ee6:	a7 fc       	sbrc	r10, 7
     ee8:	8d e2       	ldi	r24, 0x2D	; 45
     eea:	b6 01       	movw	r22, r12
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 c7 07 	call	0xf8e	; 0xf8e <fputc>
     ef2:	89 14       	cp	r8, r9
     ef4:	38 f4       	brcc	.+14     	; 0xf04 <vfprintf+0x384>
     ef6:	b6 01       	movw	r22, r12
     ef8:	80 e3       	ldi	r24, 0x30	; 48
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 c7 07 	call	0xf8e	; 0xf8e <fputc>
     f00:	9a 94       	dec	r9
     f02:	f7 cf       	rjmp	.-18     	; 0xef2 <vfprintf+0x372>
     f04:	8a 94       	dec	r8
     f06:	f3 01       	movw	r30, r6
     f08:	e8 0d       	add	r30, r8
     f0a:	f1 1d       	adc	r31, r1
     f0c:	80 81       	ld	r24, Z
     f0e:	b6 01       	movw	r22, r12
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 c7 07 	call	0xf8e	; 0xf8e <fputc>
     f16:	81 10       	cpse	r8, r1
     f18:	f5 cf       	rjmp	.-22     	; 0xf04 <vfprintf+0x384>
     f1a:	22 20       	and	r2, r2
     f1c:	09 f4       	brne	.+2      	; 0xf20 <vfprintf+0x3a0>
     f1e:	42 ce       	rjmp	.-892    	; 0xba4 <vfprintf+0x24>
     f20:	b6 01       	movw	r22, r12
     f22:	80 e2       	ldi	r24, 0x20	; 32
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 c7 07 	call	0xf8e	; 0xf8e <fputc>
     f2a:	2a 94       	dec	r2
     f2c:	f6 cf       	rjmp	.-20     	; 0xf1a <vfprintf+0x39a>
     f2e:	f6 01       	movw	r30, r12
     f30:	86 81       	ldd	r24, Z+6	; 0x06
     f32:	97 81       	ldd	r25, Z+7	; 0x07
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <vfprintf+0x3ba>
     f36:	8f ef       	ldi	r24, 0xFF	; 255
     f38:	9f ef       	ldi	r25, 0xFF	; 255
     f3a:	2b 96       	adiw	r28, 0x0b	; 11
     f3c:	e2 e1       	ldi	r30, 0x12	; 18
     f3e:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__epilogue_restores__>

00000f42 <strnlen_P>:
     f42:	fc 01       	movw	r30, r24
     f44:	05 90       	lpm	r0, Z+
     f46:	61 50       	subi	r22, 0x01	; 1
     f48:	70 40       	sbci	r23, 0x00	; 0
     f4a:	01 10       	cpse	r0, r1
     f4c:	d8 f7       	brcc	.-10     	; 0xf44 <strnlen_P+0x2>
     f4e:	80 95       	com	r24
     f50:	90 95       	com	r25
     f52:	8e 0f       	add	r24, r30
     f54:	9f 1f       	adc	r25, r31
     f56:	08 95       	ret

00000f58 <strnlen>:
     f58:	fc 01       	movw	r30, r24
     f5a:	61 50       	subi	r22, 0x01	; 1
     f5c:	70 40       	sbci	r23, 0x00	; 0
     f5e:	01 90       	ld	r0, Z+
     f60:	01 10       	cpse	r0, r1
     f62:	d8 f7       	brcc	.-10     	; 0xf5a <strnlen+0x2>
     f64:	80 95       	com	r24
     f66:	90 95       	com	r25
     f68:	8e 0f       	add	r24, r30
     f6a:	9f 1f       	adc	r25, r31
     f6c:	08 95       	ret

00000f6e <strrev>:
     f6e:	dc 01       	movw	r26, r24
     f70:	fc 01       	movw	r30, r24
     f72:	67 2f       	mov	r22, r23
     f74:	71 91       	ld	r23, Z+
     f76:	77 23       	and	r23, r23
     f78:	e1 f7       	brne	.-8      	; 0xf72 <strrev+0x4>
     f7a:	32 97       	sbiw	r30, 0x02	; 2
     f7c:	04 c0       	rjmp	.+8      	; 0xf86 <strrev+0x18>
     f7e:	7c 91       	ld	r23, X
     f80:	6d 93       	st	X+, r22
     f82:	70 83       	st	Z, r23
     f84:	62 91       	ld	r22, -Z
     f86:	ae 17       	cp	r26, r30
     f88:	bf 07       	cpc	r27, r31
     f8a:	c8 f3       	brcs	.-14     	; 0xf7e <strrev+0x10>
     f8c:	08 95       	ret

00000f8e <fputc>:
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	fb 01       	movw	r30, r22
     f98:	23 81       	ldd	r18, Z+3	; 0x03
     f9a:	21 fd       	sbrc	r18, 1
     f9c:	03 c0       	rjmp	.+6      	; 0xfa4 <fputc+0x16>
     f9e:	8f ef       	ldi	r24, 0xFF	; 255
     fa0:	9f ef       	ldi	r25, 0xFF	; 255
     fa2:	2c c0       	rjmp	.+88     	; 0xffc <fputc+0x6e>
     fa4:	22 ff       	sbrs	r18, 2
     fa6:	16 c0       	rjmp	.+44     	; 0xfd4 <fputc+0x46>
     fa8:	46 81       	ldd	r20, Z+6	; 0x06
     faa:	57 81       	ldd	r21, Z+7	; 0x07
     fac:	24 81       	ldd	r18, Z+4	; 0x04
     fae:	35 81       	ldd	r19, Z+5	; 0x05
     fb0:	42 17       	cp	r20, r18
     fb2:	53 07       	cpc	r21, r19
     fb4:	44 f4       	brge	.+16     	; 0xfc6 <fputc+0x38>
     fb6:	a0 81       	ld	r26, Z
     fb8:	b1 81       	ldd	r27, Z+1	; 0x01
     fba:	9d 01       	movw	r18, r26
     fbc:	2f 5f       	subi	r18, 0xFF	; 255
     fbe:	3f 4f       	sbci	r19, 0xFF	; 255
     fc0:	31 83       	std	Z+1, r19	; 0x01
     fc2:	20 83       	st	Z, r18
     fc4:	8c 93       	st	X, r24
     fc6:	26 81       	ldd	r18, Z+6	; 0x06
     fc8:	37 81       	ldd	r19, Z+7	; 0x07
     fca:	2f 5f       	subi	r18, 0xFF	; 255
     fcc:	3f 4f       	sbci	r19, 0xFF	; 255
     fce:	37 83       	std	Z+7, r19	; 0x07
     fd0:	26 83       	std	Z+6, r18	; 0x06
     fd2:	14 c0       	rjmp	.+40     	; 0xffc <fputc+0x6e>
     fd4:	8b 01       	movw	r16, r22
     fd6:	ec 01       	movw	r28, r24
     fd8:	fb 01       	movw	r30, r22
     fda:	00 84       	ldd	r0, Z+8	; 0x08
     fdc:	f1 85       	ldd	r31, Z+9	; 0x09
     fde:	e0 2d       	mov	r30, r0
     fe0:	09 95       	icall
     fe2:	89 2b       	or	r24, r25
     fe4:	e1 f6       	brne	.-72     	; 0xf9e <fputc+0x10>
     fe6:	d8 01       	movw	r26, r16
     fe8:	16 96       	adiw	r26, 0x06	; 6
     fea:	8d 91       	ld	r24, X+
     fec:	9c 91       	ld	r25, X
     fee:	17 97       	sbiw	r26, 0x07	; 7
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	17 96       	adiw	r26, 0x07	; 7
     ff4:	9c 93       	st	X, r25
     ff6:	8e 93       	st	-X, r24
     ff8:	16 97       	sbiw	r26, 0x06	; 6
     ffa:	ce 01       	movw	r24, r28
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	08 95       	ret

00001006 <__ultoa_invert>:
    1006:	fa 01       	movw	r30, r20
    1008:	aa 27       	eor	r26, r26
    100a:	28 30       	cpi	r18, 0x08	; 8
    100c:	51 f1       	breq	.+84     	; 0x1062 <__ultoa_invert+0x5c>
    100e:	20 31       	cpi	r18, 0x10	; 16
    1010:	81 f1       	breq	.+96     	; 0x1072 <__ultoa_invert+0x6c>
    1012:	e8 94       	clt
    1014:	6f 93       	push	r22
    1016:	6e 7f       	andi	r22, 0xFE	; 254
    1018:	6e 5f       	subi	r22, 0xFE	; 254
    101a:	7f 4f       	sbci	r23, 0xFF	; 255
    101c:	8f 4f       	sbci	r24, 0xFF	; 255
    101e:	9f 4f       	sbci	r25, 0xFF	; 255
    1020:	af 4f       	sbci	r26, 0xFF	; 255
    1022:	b1 e0       	ldi	r27, 0x01	; 1
    1024:	3e d0       	rcall	.+124    	; 0x10a2 <__ultoa_invert+0x9c>
    1026:	b4 e0       	ldi	r27, 0x04	; 4
    1028:	3c d0       	rcall	.+120    	; 0x10a2 <__ultoa_invert+0x9c>
    102a:	67 0f       	add	r22, r23
    102c:	78 1f       	adc	r23, r24
    102e:	89 1f       	adc	r24, r25
    1030:	9a 1f       	adc	r25, r26
    1032:	a1 1d       	adc	r26, r1
    1034:	68 0f       	add	r22, r24
    1036:	79 1f       	adc	r23, r25
    1038:	8a 1f       	adc	r24, r26
    103a:	91 1d       	adc	r25, r1
    103c:	a1 1d       	adc	r26, r1
    103e:	6a 0f       	add	r22, r26
    1040:	71 1d       	adc	r23, r1
    1042:	81 1d       	adc	r24, r1
    1044:	91 1d       	adc	r25, r1
    1046:	a1 1d       	adc	r26, r1
    1048:	20 d0       	rcall	.+64     	; 0x108a <__ultoa_invert+0x84>
    104a:	09 f4       	brne	.+2      	; 0x104e <__ultoa_invert+0x48>
    104c:	68 94       	set
    104e:	3f 91       	pop	r19
    1050:	2a e0       	ldi	r18, 0x0A	; 10
    1052:	26 9f       	mul	r18, r22
    1054:	11 24       	eor	r1, r1
    1056:	30 19       	sub	r19, r0
    1058:	30 5d       	subi	r19, 0xD0	; 208
    105a:	31 93       	st	Z+, r19
    105c:	de f6       	brtc	.-74     	; 0x1014 <__ultoa_invert+0xe>
    105e:	cf 01       	movw	r24, r30
    1060:	08 95       	ret
    1062:	46 2f       	mov	r20, r22
    1064:	47 70       	andi	r20, 0x07	; 7
    1066:	40 5d       	subi	r20, 0xD0	; 208
    1068:	41 93       	st	Z+, r20
    106a:	b3 e0       	ldi	r27, 0x03	; 3
    106c:	0f d0       	rcall	.+30     	; 0x108c <__ultoa_invert+0x86>
    106e:	c9 f7       	brne	.-14     	; 0x1062 <__ultoa_invert+0x5c>
    1070:	f6 cf       	rjmp	.-20     	; 0x105e <__ultoa_invert+0x58>
    1072:	46 2f       	mov	r20, r22
    1074:	4f 70       	andi	r20, 0x0F	; 15
    1076:	40 5d       	subi	r20, 0xD0	; 208
    1078:	4a 33       	cpi	r20, 0x3A	; 58
    107a:	18 f0       	brcs	.+6      	; 0x1082 <__ultoa_invert+0x7c>
    107c:	49 5d       	subi	r20, 0xD9	; 217
    107e:	31 fd       	sbrc	r19, 1
    1080:	40 52       	subi	r20, 0x20	; 32
    1082:	41 93       	st	Z+, r20
    1084:	02 d0       	rcall	.+4      	; 0x108a <__ultoa_invert+0x84>
    1086:	a9 f7       	brne	.-22     	; 0x1072 <__ultoa_invert+0x6c>
    1088:	ea cf       	rjmp	.-44     	; 0x105e <__ultoa_invert+0x58>
    108a:	b4 e0       	ldi	r27, 0x04	; 4
    108c:	a6 95       	lsr	r26
    108e:	97 95       	ror	r25
    1090:	87 95       	ror	r24
    1092:	77 95       	ror	r23
    1094:	67 95       	ror	r22
    1096:	ba 95       	dec	r27
    1098:	c9 f7       	brne	.-14     	; 0x108c <__ultoa_invert+0x86>
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	61 05       	cpc	r22, r1
    109e:	71 05       	cpc	r23, r1
    10a0:	08 95       	ret
    10a2:	9b 01       	movw	r18, r22
    10a4:	ac 01       	movw	r20, r24
    10a6:	0a 2e       	mov	r0, r26
    10a8:	06 94       	lsr	r0
    10aa:	57 95       	ror	r21
    10ac:	47 95       	ror	r20
    10ae:	37 95       	ror	r19
    10b0:	27 95       	ror	r18
    10b2:	ba 95       	dec	r27
    10b4:	c9 f7       	brne	.-14     	; 0x10a8 <__ultoa_invert+0xa2>
    10b6:	62 0f       	add	r22, r18
    10b8:	73 1f       	adc	r23, r19
    10ba:	84 1f       	adc	r24, r20
    10bc:	95 1f       	adc	r25, r21
    10be:	a0 1d       	adc	r26, r0
    10c0:	08 95       	ret

000010c2 <__prologue_saves__>:
    10c2:	2f 92       	push	r2
    10c4:	3f 92       	push	r3
    10c6:	4f 92       	push	r4
    10c8:	5f 92       	push	r5
    10ca:	6f 92       	push	r6
    10cc:	7f 92       	push	r7
    10ce:	8f 92       	push	r8
    10d0:	9f 92       	push	r9
    10d2:	af 92       	push	r10
    10d4:	bf 92       	push	r11
    10d6:	cf 92       	push	r12
    10d8:	df 92       	push	r13
    10da:	ef 92       	push	r14
    10dc:	ff 92       	push	r15
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	ca 1b       	sub	r28, r26
    10ec:	db 0b       	sbc	r29, r27
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	09 94       	ijmp

000010fa <__epilogue_restores__>:
    10fa:	2a 88       	ldd	r2, Y+18	; 0x12
    10fc:	39 88       	ldd	r3, Y+17	; 0x11
    10fe:	48 88       	ldd	r4, Y+16	; 0x10
    1100:	5f 84       	ldd	r5, Y+15	; 0x0f
    1102:	6e 84       	ldd	r6, Y+14	; 0x0e
    1104:	7d 84       	ldd	r7, Y+13	; 0x0d
    1106:	8c 84       	ldd	r8, Y+12	; 0x0c
    1108:	9b 84       	ldd	r9, Y+11	; 0x0b
    110a:	aa 84       	ldd	r10, Y+10	; 0x0a
    110c:	b9 84       	ldd	r11, Y+9	; 0x09
    110e:	c8 84       	ldd	r12, Y+8	; 0x08
    1110:	df 80       	ldd	r13, Y+7	; 0x07
    1112:	ee 80       	ldd	r14, Y+6	; 0x06
    1114:	fd 80       	ldd	r15, Y+5	; 0x05
    1116:	0c 81       	ldd	r16, Y+4	; 0x04
    1118:	1b 81       	ldd	r17, Y+3	; 0x03
    111a:	aa 81       	ldd	r26, Y+2	; 0x02
    111c:	b9 81       	ldd	r27, Y+1	; 0x01
    111e:	ce 0f       	add	r28, r30
    1120:	d1 1d       	adc	r29, r1
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	ed 01       	movw	r28, r26
    112e:	08 95       	ret

00001130 <_exit>:
    1130:	f8 94       	cli

00001132 <__stop_program>:
    1132:	ff cf       	rjmp	.-2      	; 0x1132 <__stop_program>
